<script>
    $(document).ready(function () {
        //#region Variables
        let componentid = "";
        let status = "";
        let dropdownCounter = 0;
        let dropdownCounterModal = 100;
        let addRowButton = $('#addRow');
        let existingProducts = [];
        let selectedMaterial = [];
        let productid = "";
        let counter = 0;
        //#endregion

        //#region Table Loading State
        const loader = `  
            <tr id="loading-state">
                <td><div class="custom-loader"></div></td>
                <td><div class="custom-loader"></div></td>
                <td><div class="custom-loader"></div></td>
                <td><div class="custom-loader"></div></td>
                <td><div class="custom-loader"></div></td>
                <td><div class="custom-loader"></div></td>
                <td><div class="custom-loader"></div></td>
            </tr>`;

        const tbody = $('#productioncomponents-datatable tbody');
        for (let i = 0; i < 12; i++) {
            tbody.append(loader);
        }
        //#endregion

        //#region Function Calls
        LoadTable();
        LoadList();
        //#endregion

        //#region Tables Actions and Display
        $('#productioncomponents-datatable tbody').on('click', 'tr', function () {
            var dataRow = [];
            $(this).closest('tr').find('td').each(function () {
                dataRow.push($(this).text());
            });
            // // console.log(dataRow);
            componentid = dataRow[0];
            status = dataRow[6];
            productid = dataRow[2];
        });

        function populateMaterialCountTable(data) {
            const tableBody = $('#productioncomponents-datatable tbody');
            tableBody.empty();

            if (data.length === 0) {
                const tr = $('<tr>').append($('<td>', {
                    colspan: 9,
                    class: 'text-center',
                    text: 'No Data Matched'
                }));
                tableBody.append(tr);
            } else {
                data.forEach(item => {
                    let action = '';
                    let productid = item.productid;
                    const statusBackground = getStatusBackground(item.status);
                    const containerBackground = getStatusContainerBackground(item.status);
                    if (item.status === 'ACTIVE') {
                        action = `<span class="editbutton" id="editBtn" name="editBtn" data-toggle="modal" data-target="#accessModal"><i class="fas fa-edit" style="color: rgb(99, 115, 129);"></i></span>
                                <span class="editbutton" id="inactiveBtn"><i class="fas fa-eye-slash" style="color: rgb(99, 115, 129);"></i></span>`;
                    } else if (item.status === 'INACTIVE') {
                        action = `<span class="editbutton" id="editBtn" name="editBtn" data-toggle="modal" data-target="#accessModal"><i class="fas fa-edit" style="color: rgb(99, 115, 129);"></i></span>
                                <span class="editbutton" id="activeBtn"><i class="fas fa-eye" style="color: rgb(99, 115, 129);"></i></span>`;
                    }
                    // // console.log(productid)
                    const tr = $('<tr>').append(
                        $('<td>', { text: item.componentid, 'data-label': 'Employee ID', class: 'custom-mobile-align text-left' }),
                        $('<td>', { text: item.productname ? item.productname : "N/A", 'data-label': 'product Name', class: 'custom-mobile-align text-left' }),
                        $('<td>', { text: item.productid, 'data-label': 'Product ID', class: 'custom-mobile-align text-left' }),
                        // $('<td>', { html: refinedcomponents, 'data-label': 'Components', class: 'custom-mobile-align text-left' }),
                        $('<td>', { text: item.createdby.toUpperCase(), 'data-label': 'Created By', class: 'custom-mobile-align text-left' }),
                        $('<td>', { text: ConvertDate(item.createddate), 'data-label': 'Created Date', class: 'custom-mobile-align text-left' }),
                        $('<td>', { class: 'custom-mobile-align', 'data-label': 'Status' }).append(
                            $('<div>', { class: containerBackground }).append(
                                $('<span>', { text: item.status, class: statusBackground })
                            )
                        ),
                        $('<td>', { html: action, 'data-label': 'Action', class: '' })
                    );

                    tableBody.append(tr);
                });
            }
        }

        function LoadTable() {
            $(".progress").hide();
            $(".progress").slideDown();

            $.ajax({
                url: '/productioncomponents/load',
                method: 'GET',
                dataType: 'json',
                xhrFields: {
                    onprogress: function (e) {
                        if (e.lengthComputable) {
                            var percentComplete = (e.loaded / e.total) * 100;
                            $(".progress-bar").css("width", percentComplete + "%");
                        }
                    }
                },
                success: function (data) {
                    setTimeout(function () {
                        $(".progress").slideUp(function () {
                            if (data.msg === 'success') {
                                const result = data.data;
                                populateMaterialCountTable(result);

                            } else {
                                console.error(data.msg);
                            }
                        });
                    }, 1000);
                },
                error: function (error) {
                    console.error(error);
                }
            });
        }

        $(document).on('click', '#activeBtn', function () {
            // console.log(countid);
            // console.log(status);
            $.ajax({
                type: 'POST',
                url: '/materialcount/status',
                data: {
                    status: status,
                    countid: countid,
                },
                success: function (result) {
                    if (result.msg == 'success') {
                        LoadTable();
                        success('Saved', 'Successfully')
                    }

                    if (result.msg == 'notexist') {
                        warning(`${countid} does not exist!`);
                    }

                },
                error: function (err) {
                    warning("Warning", err)
                }
            })
        });

        $("#search-input").on("input", function () {
            filterTableRows("#productioncomponents-datatable", 8, "#search-input");
        });
        //#endregion

        //#region Edit Modal
        $(document).on('click', '#updateBtn', function () {
            let componentsdata = componentUpdateModal();
            let componentid = $("#componentidmodal").val();
            let message = "";
            let overallTotal = 0;
            // console.log("components to update: ", componentsdata)

            if (componentid == '') { message += 'Component ID, '; }
            if ($('#componentsmodal-dataTable tbody tr').length === 0) {
                message += 'Update Components Table Cannot be Empty, ';
            }
            $('#componentsmodal-dataTable tbody tr').each(function () {
                var quantity = $(this).find('input[name="quantity"]').val();
                var materialid = $(this).find('.materialid').text();

                if (materialid == '') {
                    message += 'Empty Material ID, ';
                }

                if (quantity == 0) {
                    message += 'Quantity Cannot be 0, ';
                }
            });

            $("#componentsmodal-dataTable tbody tr").each(function (index) {
                var totalcost = parseFloat(RemoveCurrencyFormatting($(this).find(".totalcost").text()));
                overallTotal += totalcost;
            });

            if (message != '') {
                warning('Required', message);
            }
            else {
                // console.log("Total Cost", overallTotal, componentsdata)
                $.ajax({
                    type: 'POST',
                    url: '/productioncomponents/edit',
                    data: {
                        componentid: componentid,
                        componentsdata: componentsdata,
                        productid: productid,
                        overallTotal: overallTotal
                    },
                    success: function (result) {
                        if (result.msg == 'success') {
                            success('Saved', 'Successfully')
                            LoadTable();
                            $('#editModal').modal('hide');
                        }

                        if (result.msg == 'exist') {
                            warning('Exist', `Product already exist!`);
                        }

                    },
                    error: function (err) {
                        warning("Warning", err)
                    }
                })
            }
        });
        $(document).on('click', '#closeBtn', function () {
            const tableBody = document.querySelector('#componentsmodal-dataTable tbody');
            tableBody.innerHTML = '';
        });

        $(document).on('click', '#editBtn', function () {
            const loader = `  
                <tr id="loading-state">
                    <td><div class="custom-loader"></div></td>
                    <td><div class="custom-loader"></div></td>
                    <td><div class="custom-loader"></div></td>
                    <td><div class="custom-loader"></div></td>
                    <td><div class="custom-loader"></div></td>
                    <td><div class="custom-loader"></div></td>
                    <td><div class="custom-loader"></div></td>
                    <td><div class="custom-loader"></div></td>
                </tr>`;
            const tbody = $('#componentsmodal-dataTable tbody');
            for (let i = 0; i < 8; i++) {
                tbody.append(loader);
            }

            $('#componentidmodal').val(componentid);
            // $('#currentAccessName').val(currentAccessName);
            $('#editModal').modal('show');
            // // console.log(accesscode);
            $.ajax({
                type: 'POST',
                url: '/productioncomponents/getdetails',
                data: {
                    componentid: componentid,
                },
                success: function (result) {
                    if (result.msg == 'success') {
                        // success('Data Loaded', 'Successfully')
                        // // console.log(result.data)
                        let components = result.data
                        populateModalComponents(components)
                    }
                },
                error: function (err) {
                    warning("Warning", err)
                }
            })
        })

        function componentUpdateModal() {
            var jsonData = [];

            $('#componentsmodal-dataTable tbody tr').each(function () {
                var row = $(this);
                var materialname = row.find('input[name="materialEdit"]').val();
                var quantity = row.find('input[name="quantity"]').val();
                var materialid = row.find('.materialid').text();
                var cost = parseFloat(RemoveCurrencyFormatting(row.find('.totalcost').text())).toFixed(2);
                var unit = row.find('.units').text();
                var unitdeduction = row.find('select[name="unitDeduct"]').val();

                jsonData.push({
                    materialname: materialname,
                    materialid: materialid,
                    quantity: quantity,
                    cost: cost,
                    unit: unit,
                    unitdeduction: unitdeduction
                });

            });

            return JSON.stringify(jsonData);
        }

        function populateModalComponents(data) {
            const tableBody = document.querySelector('#componentsmodal-dataTable tbody');
            tableBody.innerHTML = '';
            let modalCounter = 0;
            var refineddata = JSON.parse(data[0].components);
            const ajaxRequests = refineddata.map(item => {
                return new Promise((resolve, reject) => {
                    $.ajax({
                        type: 'POST',
                        url: '/productionmaterials/getByID',
                        data: {
                            id: item.materialid,
                        },
                        success: function (result) {
                            let data = result.data;
                            // console.log(data, "Materials")
                            const unitDeductionInput = `
                                <select class="form-control" name="unitDeduct" id="modalUnitDeduct${modalCounter}">
                                    <option value="kg">Kilogram</option>
                                    <option value="oz">Ounce</option>
                                    <option value="g">Gram</option>
                                    <option value="mg">Milligram</option>
                                    <option value="mcg">Microgram</option>
                                    <option value="lb">Pound</option>
                                    <option value="mt">Metric Ton</option>
                                    <option value="t">Tonne</option>
                                    <option value="ml">Milliliter</option>
                                    <option value="l">Liter</option>
                                    <option value="kl">Kiloliter</option>
                                    <option value="gal">Galon</option>
                                    <option value="pc">Piece</option>
                                </select>`;
                            
                            const tr = document.createElement('tr');
                            tableBody.appendChild(tr);
                            tr.innerHTML = `
                                    <td class="custom-mobile-align" data-label="Material Name">
                                        <input autocomplete="off" class="form-control text-center custom-input" placeholder="Select Material" value="${data[0].materialname}" name="materialEdit" id="oldMaterial${modalCounter}" disabled/>
                                    </td>
                                    <td data-label="Material ID" class="custom-mobile-align material-id materialid">${item.materialid}</td>
                                    <td class="custom-mobile-align" data-label="Price/Unit">${formatCurrency(data[0].price)}</td>
                                    <td class="custom-mobile-align units" data-label="Units">${item.unit}</td>
                                    <td class="custom-mobile-align unitdeduct" data-label="Unit Deduct">${unitDeductionInput}</td>
                                    <td class="custom-mobile-align">
                                        <div class="row justify-content-center">
                                            <input name="quantity" type="number" class="form-control w-50 quantity-input" placeholder="0.00" value="${item.quantity}" maxlength="8">
                                        </div>
                                    </td>
                                    <td class="custom-mobile-align" data-label="Product Name"><span class="totalcost">${formatCurrency(item.cost)}</span></td>
                                    <td><button class="btn btn-outline-danger delete-row" id="deleterow"><i class="fas fa-trash-alt"></i></button></td>
                                `;

                            if(item.unitdeduction == 'pc'){
                                $(`#modalUnitDeduct${modalCounter}`).val(item.unitdeduction).prop("disabled", true);
                            }else{
                                $(`#modalUnitDeduct${modalCounter}`).val(item.unitdeduction);
                            }

                            $(document).on('change', `#modalUnitDeduct${modalCounter}`, function () {
                                const row = $(this).closest('tr');
                                const selectedValue = $(this).val();

                                if (selectedValue) {
                                    row.find('.quantity-input').val('');
                                    row.find('.totalcost').text('₱0.00');
                                }
                            });

                            const quantityInput = tr.querySelector('.quantity-input');
                            quantityInput.addEventListener('input', function () {
                                const row = $(this).closest('tr');
                                const unit = row.find('.units').text();
                                const unitdeduct = row.find('.unitdeduct select').val();

                                updateTotalCost(this, data[0].price, unit, unitdeduct);
                            });

                            modalCounter++;
                            resolve();
                        },
                        error: function (err) {
                            reject(err); 
                        }
                    });
                });
            });
        }

        function updateTotalCost(input, cost, unit, unitdeduct) {
            const tr = input.closest('tr');
            const quantity = parseFloat(input.value) || 0;
            const totalCostElement = tr.querySelector('.totalcost');
            // console.log(unit, unitdeduct, cost)

            const ratio = convert(unit, unitdeduct);

            const computation = parseFloat(quantity) * ratio;
            // console.log("Ratio:", ratio, `${unit} to ${unitdeduct}`);
            totalCost = parseFloat(cost) * computation;
            // console.log("Totalcost:",totalCost, input)
            totalCostElement.textContent = formatCurrency(totalCost);
        }

        $(document).on('click', '#addRow', function () {
            addNewRowModal(dropdownCounterModal);
            $(this).prop('disabled', true);
        });

        function addNewRowModal() {
            dropdownCounterModal++
            const tableBody = document.querySelector('#componentsmodal-dataTable tbody');
            const tr = document.createElement('tr');
            tableBody.appendChild(tr);
            tr.innerHTML = `
                <td class="custom-mobile-align" data-label="Material Name">
                    <input autocomplete="off" class="form-control text-center custom-input" placeholder="Select Material" name="materialEdit" id="editMaterial${dropdownCounterModal}" />
                    <input autocomplete="off" type="hidden" id="editMaterialID${dropdownCounterModal}" name="editMaterialID" />
                    <div class="col">
                        <div class="custom-dropdown cdw-tableoption" id="editMaterialDropdown${dropdownCounterModal}"></div>
                    <div class="col">
                </td>
                <td data-label="Material ID" class="custom-mobile-align material-id materialid"></td>
                <td class="custom-mobile-align priceUnit" data-label="Price/Unit"></td>
                <td class="custom-mobile-align units" data-label="Units"></td>
                <td class="custom-mobile-align unitdeduct" data-label="Unit Deduct">
                    <select class="form-control" name="unitDeduct" id="modalUnitDeduct${dropdownCounterModal}">
                        <option value="">Select Unit</option>
                        <option value="kg">Kilogram</option>
                        <option value="oz">Ounce</option>
                        <option value="g">Gram</option>
                        <option value="mg">Milligram</option>
                        <option value="mcg">Microgram</option>
                        <option value="lb">Pound</option>
                        <option value="mt">Metric Ton</option>
                        <option value="t">Tonne</option>
                        <option value="ml">Milliliter</option>
                        <option value="l">Liter</option>
                        <option value="kl">Kiloliter</option>
                        <option value="gal">Galon</option>
                        <option value="pc">Piece</option>
                    </select>
                </td>
                <td class="custom-mobile-align">
                    <div class="row justify-content-center">
                        <input name="quantity" id="newRowQuantity${dropdownCounterModal}" type="number" class="form-control w-50 quantity-input" placeholder="0.00" value="" maxlength="8">
                    </div>
                </td>
                <td class="custom-mobile-align" data-label="Product Name"><span class="totalcost"></span></td>
                <td id="editActionBtn"></td>`;

            
            $(document).on('keyup', `#newRowQuantity${dropdownCounterModal}`, function () {
                const row = $(this).closest('tr');
                let price = RemoveCurrencyFormatting(row.find('.priceUnit').text());
                let unit = row.find('.units').text();
                let unitdeduct = row.find(`select[name=unitDeduct]`).val();
                // console.log('Quantity changed:', this.value);

                updateTotalCost(this, price, unit, unitdeduct);
            });

            $.ajax({
                type: "GET",
                url: "/productionmaterials/load",
                success: function (result) {
                    let activeData = [];
                    let dropdownID = `editMaterialDropdown${dropdownCounterModal}`;
                    let inputID = `editMaterial${dropdownCounterModal}`;
                    let hiddenID = `editMaterialID${dropdownCounterModal}`;
                    let container = result.data;
                    // // console.log("Edit Container:", container);
                    let selectedTableMaterials = [];
                    $('#componentsmodal-dataTable tbody tr').each(function () {
                        const row = $(this);
                        const materialname = row.find('input[name="materialEdit"]').val();
                        selectedTableMaterials.push(materialname);
                    });

                    $.each(container, (key, item) => {
                        if (item.status === "ACTIVE") {
                            let name = item.productname;
                            let id = item.productid;
                            if (!selectedTableMaterials.includes(name)) {
                                activeData.push({
                                    display: name,
                                    value: id,
                                });
                            }
                        }
                    });
                    AddMaterialEdit(dropdownID, activeData, inputID, hiddenID);
                },
                error: function (err) {
                    warning("Warning", err);
                },
            });
        }

        function AddMaterialEdit(dropdownID, activeData, inputID, hiddenID) {
            for (const data of activeData) {
                AddMaterialEditDropdown(dropdownID, data.display, data.value, inputID, hiddenID);
            }
        }
        
        function AddMaterialEditDropdown(dropdownID, displayText, actualValue, inputID, hiddenID) {
            const dropdownElement = $("#" + dropdownID);
            const hiddenInput = $("#" + hiddenID);
            let spinner = `<span id="btnSpinner" class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>`
            
            const newOption = $("<div>")
                .addClass("dropdown-option")
                .text(displayText)
                .attr("data-value", actualValue);

            newOption.on("click", function () {
                let actionBtn = '<button class="btn btn-outline-danger delete-row" id="deleterow"><i class="fas fa-trash-alt"></i></button>';
                let quantityInput =
                    `<div class="row justify-content-center">
                        <input autocomplete="off" id="quantity" name="quantity" type="number" class="form-control quantity" placeholder="0.00" value="" maxlength="8">
                    </div>`;
                const inputElement = $("#" + inputID);
                const row = inputElement.closest("tr");

                inputElement.val(displayText);
                hiddenInput.val(actualValue);
                dropdownElement.hide();
                row.find(".material-id").html(spinner);
                row.find(".units").html(spinner);
                row.find(".priceUnit").html(spinner);

                inputElement.trigger("change").prop("disabled", true);
                // // console.log(actualValue);
                selectedMaterial.push(displayText);

                $.ajax({
                    type: 'POST',
                    url: '/productionmaterials/getmaterials',
                    data: {
                        materialid: actualValue,
                    },
                    success: function (result) {
                        // // console.log(result.data)
                        let data = result.data;
                        console.log("New Row Option:", data);
                        row.find(".material-id").text(data[0].productid);
                        row.find(".units").text(data[0].unit);
                        row.find(".priceUnit").text(formatCurrency(data[0].price));

                        if(data[0].unit == 'pc'){
                            row.find(`select[name="unitDeduct"]`).val(data[0].unit).prop("disabled", true);
                        }else{
                            row.find(`select[name="unitDeduct"]`).val(data[0].unit);
                        }
                        $(`#newRowQuantity${dropdownCounter}`).prop('disabled', false);
                        $(`#addRow`).prop('disabled', false);
                        row.find('#editActionBtn').html(actionBtn);

                    },
                    error: function (err) {
                        warning("Warning", err);
                    }
                });

            });
            dropdownElement.append(newOption);
            SetupDropdown(inputID, dropdownID, "dropdown-option");
        }
        //#endregion

        //#region Saving
        $(document).on("input", "#product", function () {
            $("#productID").val("");
        });

        $(document).on("click", "#submitBtn", function () {
            let message = "";
            let data = GetComponentData();
            let overallTotal = 0;

            let product = $("#productID").val();

            if (product === "") {
                message += "Empty Product ";
            }

            if ($("#components-dataTable tbody tr:not(:last)").length === 0) {
                message += "Add Materials Table Cannot be Empty, ";
            }

            $("#components-dataTable tbody tr:not(:last)").each(function (index) {
                var totalcost = parseFloat(RemoveCurrencyFormatting($(this).find(".totalcost").text()));
                overallTotal += totalcost;
            });


            $("#components-dataTable tbody tr:not(:last)").each(function (index) {
                var quantity = $(this).find('input[name="quantity"]').val();
                var totalcost = $(this).find(".totalcost").text();

                if (quantity == 0 || quantity <= 0) {
                    message += "0 or Negative Quantity in Row " + (index + 1) + ", ";
                }

                if (totalcost.trim() === "") {
                    message += "Empty Total Cost in Row " + (index + 1) + ", ";
                }
            });

            if (message != "") {
                warning('Required', `${message}`);
            } else {
                // console.log("Product:", product, "Components:", JSON.parse(data))
                // console.log("Total Cost:", overallTotal)
                $.ajax({
                    type: 'POST',
                    url: '/productioncomponents/save',
                    data: {
                        productid: product,
                        components: data,
                        overallTotal: overallTotal
                    },
                    success: function (result) {
                        if (result.msg == 'success') {
                            LoadTable();
                            $("#components-dataTable tbody tr:not(:last)").remove();
                            while (selectedMaterial.length > 0) {
                                selectedMaterial.pop()
                            }
                            var $table = $("#components-dataTable");
                            $table.find("tbody tr:last").remove();
                            AddTableRow();
                            counter++

                            success("Saved", "Successfully");
                        }

                        if (result.msg == 'exist') {
                            warning('Exist', `Product already exist!`);
                        }

                    },
                    error: function (err) {
                        warning(err);
                    }
                })
            }
        });

        function GetComponentData() {
            var jsonData = [];

            $("#components-dataTable tbody tr:not(:last)").each(function (index) {
                var row = $(this);
                let materialname = row.find('input[name="material"]').val();
                let material = row.find('.material-id').text();
                let unit = row.find('.unit').text();
                let totalcost = RemoveCurrencyFormatting(row.find('.totalcost').text());
                let quantity = row.find('input[name="quantity"]').val();
                let unitdeduction = row.find('select[name="unitDeduct"]').val();

                jsonData.push({
                    materialname: materialname,
                    materialid: material,
                    unit: unit,
                    cost: totalcost,
                    quantity: quantity,
                    unitdeduction: unitdeduction
                });
            });

            return JSON.stringify(jsonData);
        }

        function AddMaterial(dropdownID, activeData, inputID, hiddenID) {
            for (const data of activeData) {
                AddMaterialDropdown(dropdownID, data.display, data.value, inputID, hiddenID);
            }
        }
        
        function AddMaterialDropdown(dropdownID, displayText, actualValue, inputID, hiddenID) {
            const dropdownElement = $("#" + dropdownID);
            const hiddenInput = $("#" + hiddenID);
            let spinner = `<span id="btnSpinner" class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>`

            // console.log("New Counter:", counter);

            const newOption = $("<div>")
                .addClass("dropdown-option")
                .text(displayText)
                .attr("data-value", actualValue);

            newOption.on("click", function () {
                let actionBtn = '<button class="btn btn-sm btn-outline-danger" id="deleterow"><i class="fas fa-trash-alt"></i></button>';
                let quantityInput =
                    `<div class="row justify-content-center">
                            <input autocomplete="off" id="quantity" name="quantity" type="number" class="form-control quantity" placeholder="0.00" value="" maxlength="8">
                        </div>`;
                const inputElement = $("#" + inputID);
                const row = inputElement.closest("tr");

                row.find('.unit').html(spinner);
                row.find('.unitcost').html(spinner);
                row.find('.material-id').html(spinner);

                inputElement.val(displayText);
                hiddenInput.val(actualValue);
                dropdownElement.hide();

                inputElement.trigger("change").prop("disabled", true);
                // // console.log(actualValue);
                selectedMaterial.push(displayText);

                $.ajax({
                    type: 'POST',
                    url: '/productionmaterials/getmaterials',
                    data: {
                        materialid: actualValue,
                    },
                    success: function (result) {
                        // console.log("Data: ",result.data)
                        let data = result.data;
                        $.each(data, function (index, item) {
                            let unit = item.unit;
                            row.find(`#quantityInput${counter - 1}`).html(quantityInput);
                            row.find('.unit').text(unit);
                            row.find('.unitcost').text(formatCurrency(item.price));
                            row.find('.totalcost').text(formatCurrency(0));
                            row.find('.material-id').text(item.productid);

                            row.find('#actionBtn').html(actionBtn);
                            //Default Value of Material Selection
                            $(`#unitdeduct${counter - 1}`).val(unit)
                            let unitdeduct = $(`#unitdeduct${counter - 1}`).val();
                            computecost(item.price, row, unitdeduct, unit);

                            if (unit == 'pc') {

                                $(`#unitdeduct${counter - 1}`).val(unit).prop('disabled', true);
                                row.find(`#quantityInput${counter - 1}`).html(quantityInput);
                                unitdeduct = $(`#unitdeduct${counter - 1}`).val();

                                computecost(item.price, row, unitdeduct, unit);
                            } else {
                                //When Default Value Changes
                                $(document).on('change', `#unitdeduct${counter - 1}`, function () {
                                    unitdeduct = $(this).val();
                                    row.find(`#quantityInput${counter - 1}`).html(quantityInput);
                                    row.find('.quantity').val();
                                    row.find('.totalcost').text('');

                                    computecost(item.price, row, unitdeduct, unit);
                                });
                            }
                        });
                    },
                    error: function (err) {
                        warning("Warning", err);
                    }
                });
                // // console.log("Clicked count:", counter);

                AddTableRow(counter);
                counter++;
            });

            dropdownElement.append(newOption);
            SetupDropdown(inputID, dropdownID, "dropdown-option");
        }

        function computecost(price, row, unitdeduct, unit) {
            row.find('.quantity').on('keyup', function () {
                // // console.log("Cost:", price, "Unit Deduction:", unitdeduct, "Actual Unit:", unit)
                let totalCost = 0;
                let quantity = $(this).val();
                let computation;
                if (quantity === '') {
                    quantity = '0.00';
                }

                const ratio = convert(unit, unitdeduct);
                computation = parseFloat(quantity) * ratio;
                // console.log("Ratio:", ratio, `${unit} to ${unitdeduct}`);
                totalCost = parseFloat(price) * computation;

                row.find('.totalcost').text(formatCurrency(totalCost));
            });
        }

        function AddTableRow(counter) {
            // console.log("Counter Inside AddTableRow:", counter)
            let NewRow = `<tr>
                    <td data-label="Material Name" class="custom-mobile-align">
                        <div class="col">
                            <div class="input-group">
                                <input autocomplete="off" class="form-control text-center custom-input" placeholder="Select material" name="material"
                                    id="material${counter}" />
                                <input autocomplete="off" type="hidden" id="materialID${counter}" name="materialID" />
                            </div>
                            <div class="custom-dropdown cdw-tableoption" id="materialDropdown${counter}"></div>
                        </div>
                    </td>
                    <td data-label="Material ID" class="custom-mobile-align material-id"></td>
                    <td data-label="Unit" class="custom-mobile-align unit"></td>
                    <td data-label="Unit" class="custom-mobile-align unitcost"></td>
                    <td data-label="Unit" class="custom-mobile-align unitdeduct">
                        <select class="form-control" name="unitDeduct" id="unitdeduct${counter + 1}">
                            <option value="">Select Unit</option>
                            <option value="kg">Kilogram</option>
                            <option value="oz">Ounce</option>
                            <option value="g">Gram</option>
                            <option value="mg">Milligram</option>
                            <option value="mcg">Microgram</option>
                            <option value="lb">Pound</option>
                            <option value="mt">Metric Ton</option>
                            <option value="t">Tonne</option>
                            <option value="ml">Milliliter</option>
                            <option value="l">Liter</option>
                            <option value="kl">Kiloliter</option>
                            <option value="gal">Galon</option>
                            <option value="pc">Piece</option>
                        </select>
                    </td>
                    <td data-label="Quantity" class="custom-mobile-align" id="quantityInput${counter + 1}"></td>
                    <td data-label="Unit" class="custom-mobile-align totalcost"></td>
                    <td data-label="Action" class="custom-mobile-align" id="actionBtn"></td>
                </tr>;`;
            $("#components-dataTable").append(NewRow);

            $.ajax({
                type: "GET",
                url: "/productionmaterials/load",
                success: function (result) {
                    let activeData = [];
                    let dropdownID = `materialDropdown${counter}`;
                    let inputID = `material${counter}`;
                    let hiddenID = `materialID${counter}`;
                    let container = result.data;
                    // // console.log(selectedMaterial);

                    $.each(container, (key, item) => {
                        if (item.status === "ACTIVE") {
                            let name = item.productname;
                            let id = item.productid;
                            if (!selectedMaterial.includes(name)) {
                                activeData.push({
                                    display: name,
                                    value: id,
                                });
                            }
                        }
                    });
                    AddMaterial(dropdownID, activeData, inputID, hiddenID);
                },
                error: function (err) {
                    warning("Warning", err);
                },
            });

        }
        //#endregion Saving

        //#region Delete Row
        $(document).on("click", "#deleterow", function (e) {
            let materialValue = $(this).closest("tr").find(".custom-input").val();
            var index = selectedMaterial.indexOf(materialValue);
            if (index !== -1) {
                selectedMaterial.splice(index, 1);
            }
            let $row = $(this).closest("tr");
            let rowIndex = $row.index();
            $row.remove();

            var $table = $("#components-dataTable");
            $table.find("tbody tr:last").remove();
            AddTableRow(counter);
            counter++;
        });
        //#endregion

        //#region Initial Load of dropdown data
        function LoadList() {
            Fetch('/productioncomponents/load', (result) => {
                const data = result.data;
                data.forEach(row => {
                    existingProducts.push({productid: row.productid, description: row.productname});
                });
            });

            Fetch("/products/load", (result) => {
                const data = result.data;
                let activeData = [];
                let dropdownID = "productDropdown";
                let inputID = "product";
                let hiddenID = "productID";
                let container = result.data;
                $.each(container, (key, item) => {
                    if (item.status === "ACTIVE") {
                        let name = item.description;
                        let id = item.productid;
                        if (!existingProducts.some(row => row.productid === id)) {
                            activeData.push({
                                display: name,
                                value: id,
                            });
                        }
                    }
                });
                AddDropdownData(dropdownID, activeData, inputID, hiddenID)
            })

            $.ajax({
                type: "GET",
                url: "/productionmaterials/load",
                success: function (result) {
                    let activeData = [];
                    let dropdownID = "materialDropdown";
                    let inputID = "material";
                    let hiddenID = "materialID";
                    let container = result.data;
                    // // console.log(container)
                    $.each(container, (key, item) => {
                        if (item.status === "ACTIVE") {
                            let name = item.productname;
                            let id = item.productid;
                            activeData.push({
                                display: name,
                                value: id,
                            });
                        }
                    });
                    AddMaterial(dropdownID, activeData, inputID, hiddenID)
                },
                error: function (err) {
                    warning('Warning', err);
                },
            });

            $.ajax({
                type: "GET",
                url: "/productionmaterials/load",
                success: function (result) {
                    let container = result.data;
                    $.each(container, (key, item) => {
                        let materialname = item.productname;
                        let materialid = item.productid;
                        // // console.log(materialname);

                        var listItem = $("<li></li>")
                            .text(materialname)
                            .data("material", materialid);

                        $(".materiallist").append(listItem);
                    });

                    $(".materiallist").on("click", "li", function () {
                        var selectedOption = $(this).text();
                        var selectedmaterialid = $(this).data("material");

                        $("#selectedmaterial").text(selectedOption);
                        $("#material").val(selectedmaterialid).change();
                    });
                },
                error: function (err) {
                    warning("Warning", err)
                },
            });

            let data = [{ unit: "Kilogram (kg)", id: "kg" }, { unit: "Gram (g)", id: "g" }, { unit: "Milligram (mg)", id: "mg" }, { unit: "Ounce (oz)", id: "oz" }, { unit: "Piece (pc)", id: "pc" }];

            $.each(data, function (key, item) {
                var listItem = $('<li></li>')
                    .text(item.unit)
                    .data('unitid', item.id);
                $('.unitlist').append(listItem);
            });
            $('.unitlist li').click(function () {
                var selectedOption = $(this).text();
                var selectedunitId = $(this).data('unitid');
                $('#selectedunit').text(selectedOption);
                $('#unitid').val(selectedunitId);
            });
        }
        //#endregion
    
        //#region Conversion Rate
        function convert (unit, unitdeduct){
            let ratio = 1;

            switch (`${unit}:${unitdeduct}`) {
                case 'kg:mcg':
                    return ratio = 1 / 1e9;
                case 'kg:mg':
                    return ratio = 1 / 1e6;
                case 'kg:g':
                    return ratio = 1 / 1000;
                case 'kg:oz':
                    return ratio = 1 / 35.274;
                case 'kg:lb':
                    return ratio = 1 / 2.20462;
                case 'kg:mt':
                    return ratio = 1 / 0.001;
                case 'kg:t':
                    return ratio = 1 / 0.001;
                case 'kg:l':
                    return ratio = 1;
                case 'kg:ml':
                    return ratio = 1 / 1000;
                case 'kg:kl':
                    return ratio = 1 / 0.001;
                case 'kg:gal':
                    return ratio = 1 / 0.264172;
                case 'g:mcg':
                    return ratio = 1 / 1000;
                case 'g:mg':
                    return ratio = 1 / 1000;
                case 'g:kg':
                    return ratio = 1000;
                case 'g:oz':
                    return ratio = 1 / 0.035274;
                case 'g:lb':
                    return ratio = 1 / 0.00220462;
                case 'g:mt':
                    return ratio = 1 / 1e-6;
                case 'g:t':
                    return ratio = 1 / 1e-6;
                case 'g:l':
                    return ratio = 1 / 1000;
                case 'g:ml':
                    return ratio = 1;
                case 'g:kl':
                    return ratio = 1 / 1e-6;
                case 'g:gal':
                    return ratio = 1 / 264.172;
                case 'mg:mcg':
                    return ratio = 1 / 1000;
                case 'mg:g':
                    return ratio = 1000;
                case 'mg:kg':
                    return ratio = 1e6;
                case 'mg:oz':
                    return ratio = 1 / 0.000035274;
                case 'mg:lb':
                    return ratio = 1 / 0.00000220462;
                case 'mg:mt':
                    return ratio = 1 / 1e-9;
                case 'mg:t':
                    return ratio = 1 / 1e-9;
                case 'mg:l':
                    return ratio = 1e6;
                case 'mg:ml':
                    return ratio = 1000;
                case 'mg:kl':
                    return ratio = 1 / 1e-9;
                case 'mg:gal':
                    return ratio = 1 / 3.78541e-6;
                case 'mcg:mg':
                    return ratio = 1000;
                case 'mcg:g':
                    return ratio = 1e6;
                case 'mcg:kg':
                    return ratio = 1e9;
                case 'mcg:oz':
                    return ratio = 1 / 3.5274e-8;
                case 'mcg:lb':
                    return ratio = 1 / 2.2046e-9;
                case 'mcg:mt':
                    return ratio = 1 / 1e-12;
                case 'mcg:t':
                    return ratio = 1 / 1e-12;
                case 'mcg:l':
                    return ratio = 1e9;
                case 'mcg:ml':
                    return ratio = 1e6;
                case 'mcg:kl':
                    return ratio = 1e12;
                case 'mcg:gal':
                    return ratio = 1 / 3.78541e-9;
                case 'l:ml':
                    return ratio = 1 / 1000;
                case 'l:kl':
                    return ratio = 1 / 0.001;
                case 'l:gal':
                    return ratio = 1 / 0.264172;
                case 'l:kg':
                    return ratio = 1;
                case 'ml:l':
                    return ratio = 1000;
                case 'ml:kl':
                    return ratio = 1e6;
                case 'ml:gal':
                    return ratio = 1 / 0.000264172;
                case 'ml:kg':
                    return ratio = 1000;
                case 'kl:l':
                    return ratio = 1 / 1000;
                case 'kl:ml':
                    return ratio = 1 / 1e6;
                case 'kl:gal':
                    return ratio = 1 / 264.172;
                case 'kl:kg':
                    return ratio = 1 / 1000;
                case 'gal:l':
                    return ratio = 0.264172;
                case 'gal:ml':
                    return ratio = 1 / 0.000264172;
                case 'gal:kl':
                    return ratio = 264.172;
                case 'gal:kg':
                    return ratio = 0.264172;
                default:
                    return ratio;
            }
        }
        //#endregion
    })
</script>