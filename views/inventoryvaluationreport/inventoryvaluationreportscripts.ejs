<script>
  $(document).ready(function () {
    let dropdownCounter = 0;
    reloadTableData()
    LoadList()
    let reportid = '';

    $('#valuation-datatable tbody').on('click', 'tr', function () {
        var dataRow = [];
        $(this).closest('tr').find('td').each(function () {
            dataRow.push($(this).text());
        });
        console.log(dataRow);
        reportid = dataRow[0];
    }) 

    $(document).on('change', '#categoryid', function() {
      let category = $(this).val();
      console.log("category changed to: "+ category)

      if(category != ''){
        $.ajax({
          type: 'POST',
          url: '/products/getproductbycategory',
          data: {
            category: category,
          },
          success: function (result) {
              var data = result.data;
              console.log(data.length)
              if(data.length != 0){
                const tableBody = $('#components-datatable tbody');
                tableBody.empty();
                console.log(data);
                $.each(data, function (index, item) {
                  var newRow = $("<tr>");
                  newRow.append($("<td>").attr('data-label', 'Product ID').addClass('custom-mobile-align productid').text(item.productid));
                  newRow.append($("<td>").attr('data-label', 'Branch ID').addClass('custom-mobile-align branchid').text(item.branchid));
                  newRow.append($("<td>").attr('data-label', 'Product Name').addClass('custom-mobile-align productname').text(item.productname));
                  newRow.append($("<td>").attr('data-label', 'Price').addClass('custom-mobile-align unitcost').text(item.price));
                  newRow.append($("<td>").attr('data-label', 'Category').addClass('custom-mobile-align category').text(item.category));
                  newRow.append($("<td>").attr('data-label', 'Current Stock').addClass('custom-mobile-align currentstock').text(item.currentstock));
                  newRow.append($("<td>").attr('data-label', 'Current Stock').addClass('custom-mobile-align totalvalue').text(parseFloat(item.price)*parseFloat(item.currentstock)));
                  $('#components-datatable tbody').append(newRow);
                });
              }else if(data.length == 0){
                const tableBody = $('#components-datatable tbody');
                tableBody.empty();
                const tr = $('<tr>').append($('<td>', {
                  colspan: 7,
                  class: 'text-center',
                  text: 'No Data Matched'
                }));
                tableBody.append(tr);
              }

          },
          error: function (err) {
              errormsg(err);
          }
      });   
      }
    });

    $(document).on('click', '#reportbycategory', function() {
      let valuationdata = converttojson();
      let notes = $('#notesbycategory').val();

      var message = "";

      if ($('#components-datatable tbody tr').length === 0) { message += 'Table cannot be empty! ' }
      if (notes == '') { message += 'Notes cannot be empty! ' }
      console.log(valuationdata)

      if (message != '') {
        warning('Required', `Please fill up ${message}`);
      }else{
        console.log(notes, valuationdata);
        $.ajax({
          type: 'POST',
          url: '/inventoryvaluationreport/save',
          data: {
              notes: notes,
              valuationdata: valuationdata,
          },
          success: function (result) {
              if (result.msg == 'success') {
                  reloadTableData()
                  const tableBody = $('#components-datatable tbody');
                  tableBody.empty();
                  $('#selectedcategory').val("Select Category");
                  $('#notesbycategory').val('');
                  success('Saved', 'Successfully')
              }

              if (result.msg == 'exist') {
                  warning('Exist', `${fullname} already exist!`);
              }

          },
          error: function (err) {
              errormsg(err);
          }
        })
      }
    });

    function converttojson(){
      let jsonData = [];
      $('#components-datatable tbody tr').each(function () {
          var row = $(this);
          var productid = row.find('.productid').text();
          var quantity = row.find('.currentstock').text();
          var unitcost = row.find('.unitcost').text();
          var totalvalue = row.find('.totalvalue').text();
          var branchid = row.find('.branchid').text();
          var category = row.find('.category').text();
          var productname = row.find('.productname').text();

          jsonData.push({
              productid: productid,
              quantity: quantity,
              unitcost: unitcost,
              totalvalue: totalvalue,
              branchid: branchid,
              category: category,
              productname: productname
          })
      });
      return JSON.stringify(jsonData);
    }

    function populatedatatable(data) {
      console.log(data);
      const tableBody = $('#valuation-datatable tbody');
      tableBody.empty();

      if (data.length === 0) {
        const tr = $('<tr>').append($('<td>', {
          colspan: 5,
          class: 'text-center',
          text: 'No Data Matched'
        }));
        tableBody.append(tr);
      } else {
        data.forEach(item => {
          const tr = $('<tr>').append(
            $('<td>', { text: item.reportid, 'data-label': 'Inventory ID', class: 'custom-mobile-align bmss-link', 'data-toggle': 'modal', 'data-target': '#valuationitems'  }),
            $('<td>', { text: item.reportdate, 'data-label': 'Product', class: 'custom-mobile-align' }),
            $('<td>', { text: item.generatedby, 'data-label': 'Branch ID', class: 'custom-mobile-align' }),
            $('<td>', { text: item.notes, 'data-label': 'Quantity', class: 'custom-mobile-align' }),
          );
          tableBody.append(tr);
        });
      }
    }

    function reloadTableData() {
      $(".progress").hide();
      $(".progress").slideDown();

      $.ajax({
        url: '/inventoryvaluationreport/load',
        method: 'GET',
        dataType: 'json',
        xhrFields: {
          onprogress: function (e) {
            if (e.lengthComputable) {
              var percentComplete = (e.loaded / e.total) * 100;
              $(".progress-bar").css("width", percentComplete + "%");
            }
          }
        },
        success: function (data) {
          console.log(data)
          setTimeout(function () {
            $(".progress").slideUp(function () {
              if (data.msg === 'success') {
                populatedatatable(data.data);
              } else {
                console.error(data.msg);
              }
            })
          }, 1000);
        },
        error: function (error) {
          console.error(error);
        }
      });
    }

    function LoadList() {
      $.ajax({
            type: "GET",
            url: "/category/load",
            success: function (result) {
                let activeData = [];
                let dropdownID = "categoryDropdown";
                let inputID = "category";
                let hiddenID = "categoryID";
                let container = result.data;
                console.log(container)
                $.each(container, (key, item) => {
                    if (item.status === "ACTIVE") {
                        let name = item.categoryname;
                        let id = item.categoryid;
                        activeData.push({
                            display: name,
                            value: id,
                        });
                    }
                });
                AddDropdownData(dropdownID, activeData, inputID, hiddenID)
            },
            error: function (err) {
                warning('Warning', err);
            },
        });

      $.ajax({
          type: 'GET',
          url: '/products/load',
          success: function (result) {
              var data = result.data;
              $.each(data, function (key, item) {
                  if (item.status == "ACTIVE") {
                      var options = new Option(item.description, item.productid);
                      $('#productlist').append(options);
                  }
              });
          },
          error: function (err) {
              errormsg(err);
          }
      });
    }

    $('.categorylist').on('click', 'li', function () {
        var selectedOption = $(this).text();
        var selectedCategoryId = $(this).data('categoryid');

        $('#selectedcategory').text(selectedOption);
        $('#categoryid').val(selectedCategoryId).change();
    });

    $(document).on('click', '.bmss-link', function(){
      console.log(reportid);
      $.ajax({
          type: 'POST',
          url: '/inventoryvaluationreport/getvaluationitems',
          data: {
              reportid: reportid,
          },
          success: function (result) {
              let data = result.data;
              let totalCost = 0;

              $('#valuationitems-dataTable tbody').empty();
              console.log(data)

              $.each(data, function (key, item) {
                var newRow = $("<tr>");
                newRow.append($("<td>").attr('data-label', 'Details ID').addClass('custom-mobile-align').text(item.branchid));
                newRow.append($("<td>").attr('data-label', 'Date').addClass('custom-mobile-align').text(item.productid));
                newRow.append($("<td>").attr('data-label', 'Item Name').addClass('custom-mobile-align').text(item.productname));
                newRow.append($("<td>").attr('data-label', 'Price').addClass('custom-mobile-align').text(item.quantity));
                newRow.append($("<td>").attr('data-label', 'Quantity').addClass('custom-mobile-align').text(item.category));
                newRow.append($("<td>").attr('data-label', 'Total').addClass('custom-mobile-align').text(formatCurrency(item.unitcost)));
                newRow.append($("<td>").attr('data-label', 'Total').addClass('custom-mobile-align').text(formatCurrency(item.totalvalue)));
                $('#valuationitems-dataTable tbody').append(newRow);
                totalCost += parseFloat(item.totalvalue);
              });

              $('#total-cost').text(formatCurrency(totalCost));
          },
          error: function (err) {
              errormsg(err);
          }
      });
    });

    $(document).on("input", "#category", function () {
        $("#categoryID").val("");
    });

    $(document).on('click', '#reportbyproduct', function () {
      let valuationdata = productsTableToJson();
      let notes = $('#notesbyproduct').val();

      var message = "";

      if ($('#byproducts-datatable tbody tr:not(:last)').length === 0) { message += 'Table cannot be empty! ' }
      if (notes == '') { message += 'Notes cannot be empty! ' }
      console.log(valuationdata)

      if (message != '') {
        warning('Required', `Please fill up ${message}`);
      }else{
        console.log(notes, valuationdata);
        $.ajax({
          type: 'POST',
          url: '/inventoryvaluationreport/save',
          data: {
              notes: notes,
              valuationdata: valuationdata,
          },
          success: function (result) {
              if (result.msg == 'success') {
                  reloadTableData()
                  $('#byproducts-datatable tbody tr:not(:last)').remove();
                  $('#notesbyproduct').val('');
                  success('Saved', 'Successfully')
              }

              if (result.msg == 'exist') {
                  warning('Exist', `${fullname} already exist!`);
              }

          },
          error: function (err) {
              errormsg(err);
          }
        })
      }
    });

    function AddNewRow(dropdownCounter) {
      console.log()
      dropdownCounter++

      $('#byproducts-datatable').append(newRow);
      let row = $('#byproducts-datatable').find('tr').last();
      let newActionBtn = '<button class="btn btn-outline-danger delete-row" id="deleterow">Remove</button>';
      let newrow = '<select class="form-control text-center productname" name="productlist" id="productlist' + dropdownCounter + '"><option value="">Select Product</option></select>';
      var newRow =
          '<tr>' +
          '<td data-label="Product Name" class="custom-mobile-align">' + newrow + '</td>' +
          '<td data-label="branch ID" class="custom-mobile-align branch-id' + dropdownCounter + ' branchid"></td>' +
          '<td data-label="product ID" class="custom-mobile-align product-id' + dropdownCounter + ' productid"></td>' +
          '<td data-label="Unit Cost" class="custom-mobile-align unit-cost' + dropdownCounter + ' unitcost"></td>' +
          '<td data-label="Category" class="custom-mobile-align category' + dropdownCounter + ' ctgy"></td>' +
          '<td data-label="Current Stock" class="custom-mobile-align current-stock' + dropdownCounter + ' currentstock"></td>' +
          '<td data-label="Total Value" class="custom-mobile-align total-value' + dropdownCounter + ' totalvalue"></td>' +
          '<td data-label="Action" class="custom-mobile-align delete-row"></td>' +
          '</tr>';
      $('#byproducts-datatable').append(newRow);

      $(document).on('change', '#productlist' + dropdownCounter, function () {
          let newproductid = $(this).val();
          console.log(newproductid);
          let existingValues = [];

          let currentRow = $(this).closest('tr');
          let actionButton = currentRow.find('.delete-row');

          $('#byproducts-datatable select[name="productlist"]').each(function () {
              let selectedValue = $(this).val();
              if (selectedValue !== null && selectedValue !== "") {
                  existingValues.push(selectedValue);
              }
          });

          let isDuplicate = existingValues.filter(value => value === newproductid).length > 1;

          if (isDuplicate) {
              warning('Duplicate!', `Product already exist.`);
              $(this).val('');
          } else {
              $.ajax({
                type: 'POST',
                url: '/products/getbyproductname',
                data: {
                  productid: newproductid,
                },
                success: function (result) {
                    console.log(result.data)
                    let data = result.data;
                    $.each(data, function (index, item) {
                        currentRow.find('.branch-id' + dropdownCounter).text(item.branchid);
                        currentRow.find('.product-id' + dropdownCounter).text(item.productid);
                        currentRow.find('.unit-cost' + dropdownCounter).text(item.price);
                        currentRow.find('.category' + dropdownCounter).text(item.category);
                        currentRow.find('.current-stock' + dropdownCounter).text(item.currentstock);
                        currentRow.find('.total-value' + dropdownCounter).text(parseFloat(item.price)*parseFloat(item.currentstock));
                    });
                },
                error: function (err) {
                    errormsg(err);
                }
              });
              if (newproductid !== '') {
                  actionButton.html(newActionBtn);
              } else {
                  actionButton.html('');
              }
              AddNewRow(dropdownCounter);
              $(this).prop('disabled', true);
          }

      });

      $.ajax({
          type: 'GET',
          url: '/products/load',
          success: function (result) {
              var data = result.data;
              $.each(data, function (key, item) {
                  if (item.status == "ACTIVE") {
                      var options = new Option(item.description, item.productid);
                      $('#productlist' + dropdownCounter).append(options);
                  }
              });
          },
          error: function (err) {
              errormsg(err);
          }
      });
    }

    $(document).on('change', '#productlist', function () {
      dropdownCounter++
      let productid = $(this).val();

      AddNewRow(dropdownCounter);
      console.log('Material ID changed to: ' + productid);
      let row = $(this).closest('tr');

      let newAction = '<button class="btn btn-outline-danger delete-row" id="deleterow">Remove</button>'

      if (productid != '') {
          row.find('#actionBtn').html(newAction);
      } else {
          row.find('#actionBtn').html('');
      }

      $(this).prop('disabled', true);

      $.ajax({
          type: 'POST',
          url: '/products/getbyproductname',
          data: {
              productid: productid,
          },
          success: function (result) {
              console.log(result.data)
              let data = result.data;
              $.each(data, function (index, item) {
                row.find('.branch-id').text(item.branchid);
                row.find('.product-id').text(item.productid);
                row.find('.unit-cost').text(item.price);
                row.find('.category').text(item.category);
                row.find('.current-stock').text(item.currentstock);
                row.find('.total-value').text(parseFloat(item.price)*parseFloat(item.currentstock));
              });
          },
          error: function (err) {
              errormsg(err);
          }
      });
    });

    $(document).on('click', '#deleterow', function () {
        $(this).closest('tr').remove();
    });

    function productsTableToJson() {
      let jsonData = [];

      $('#byproducts-datatable tbody tr:not(:last)').each(function () {
          let row = $(this);
          let productname = row.find('select[name="productlist"]').find(":selected").text();
          let branchid = row.find('.branchid').text();
          let productid = row.find('.productid').text();
          let unitcost = row.find('.unitcost').text();
          let category = row.find('.ctgy').text();
          let currentstock = row.find('.currentstock').text();
          let totalvalue = row.find('.totalvalue').text();

          jsonData.push({
              productname: productname,
              branchid: branchid,
              productid: productid,
              unitcost: unitcost,
              category: category,
              quantity: currentstock,
              totalvalue: totalvalue
          });
      });

      return JSON.stringify(jsonData);
    }
    
  });
</script>