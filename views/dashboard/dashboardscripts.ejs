<script>
    $(document).ready(function () {
        let currentFilter = 'daily'; 
        let myChart;
        LoadYearly();
        renderLineChart;
        LoadChart(currentFilter);
        LoadTable(currentFilter);

        $('#daily').click(function () {
            currentFilter = 'daily';
            updateFilterLabel(currentFilter);
            LoadChart(currentFilter);
            LoadTable(currentFilter);
        });

        $('#monthly').click(function () {
            currentFilter = 'monthly';
            updateFilterLabel(currentFilter);
            LoadChart(currentFilter);
            LoadTable(currentFilter);
        });

        $('#yearly').click(function () {
            currentFilter = 'yearly';
            updateFilterLabel(currentFilter);
            LoadChart(currentFilter);
            LoadTable(currentFilter);
        });

        function updateFilterLabel(filter) {
            const filterLabel = document.getElementById('currentFilterLabel');
            const bestSellersFilterLabel = document.getElementById('bestSellersFilterLabel');
        
            if (filter === 'daily') {
                filterLabel.textContent = 'Daily';
                bestSellersFilterLabel.textContent = 'Daily';
            } else if (filter === 'monthly') {
                filterLabel.textContent = 'Monthly';
                bestSellersFilterLabel.textContent = 'Monthly';
            } else if (filter === 'yearly') {
                filterLabel.textContent = 'Yearly';
                bestSellersFilterLabel.textContent = 'Yearly';
            }

        }

        function processSalesData(data) {
            const items = {};

            data.forEach(entry => {
                const itemsArray = JSON.parse(entry.st_description);
                itemsArray.forEach(item => {
                    if (!items[item.name]) {
                        items[item.name] = {
                            name: item.name,
                            totalQuantity: item.quantity
                        };
                    } else {
                        items[item.name].totalQuantity += item.quantity;
                    }
                });
            });

            const aggregatedItems = Object.values(items);

            aggregatedItems.sort((a, b) => b.totalQuantity - a.totalQuantity);

            const topItems = aggregatedItems.slice(0, 5);

            return topItems;
        }

        function LoadChart(filter) {
            let chartfilter = filter;

            if (chartfilter == '') {
                warning('Error', 'Error 404');
            } else {
                $.ajax({
                    type: 'POST',
                    url: '/salesdetails/getdescription',
                    data: {
                        chartfilter: chartfilter,
                    },
                    success: function (result) {
                        if (result.msg == 'success') {
                            const topSalesItems = processSalesData(result.data);
                            //console.log(topSalesItems)
                            if (topSalesItems && topSalesItems.length > 0) {
                                const labels = topSalesItems.map(item => item.name);
                                const totalQuantity = topSalesItems.map(item => item.totalQuantity);

                                if (!myChart) {
                                    const ctx = document.getElementById('myChart').getContext('2d');
                                    const chartdata = {
                                        labels: labels,
                                        datasets: [{
                                            label: 'Total Sales',
                                            data: totalQuantity,
                                            backgroundColor: [
                                                'rgb(156, 44, 61, 0.85)'
                                            ],
                                        }]
                                    };

                                    const config = {
                                        type: 'bar',
                                        data: chartdata,
                                        options: {
                                            maintainAspectRatio: false,
                                            scales: {
                                                x: {
                                                    grid: {
                                                        display: false,
                                                    },
                                                },
                                                y: {
                                                    ticks: {
                                                        callback: function(value, index, values) {
                                                            return `${value.toLocaleString(undefined, { maximumFractionDigits: 0 })}`;
                                                        }
                                                    }
                                                }
                                            },
                                            animation: {
                                                duration: 1000,
                                                easing: 'easeInOutQuad'
                                            }
                                        }
                                    };

                                    myChart = new Chart(ctx, config);
                                } else {
                                    myChart.data.labels = labels;
                                    myChart.data.datasets[0].data = totalQuantity;
                                    myChart.update({
                                    duration: 1000, 
                                    easing: 'easeInOutQuad'
                                });
                                }
                                $('#chartContainer').show();
                                $('#noDataMessage').hide();
                            } else {
                                $('#chartContainer').hide();
                                $('#noDataMessage').show();
                                console.log('No data available.');
                            }
                        }
                    },
                    error: function (err) {
                        errormsg(err);
                    }
                });
            }
        }

        function processSalesDataTable(data) {
            const groupedItems = {};

            data.forEach(entry => {
                const itemsArray = JSON.parse(entry.st_description);
                itemsArray.forEach(item => {
                    if (!groupedItems[item.name]) {
                        groupedItems[item.name] = {
                            name: item.name,
                            totalQuantity: item.quantity,
                            totalPrice: item.price * item.quantity
                        };
                    } else {
                        groupedItems[item.name].totalQuantity += item.quantity;
                        groupedItems[item.name].totalPrice += item.price * item.quantity;
                    }
                });
            });

            const groupedItemsArray = Object.values(groupedItems);

            groupedItemsArray.sort((a, b) => b.totalPrice - a.totalPrice);
            return groupedItemsArray;
        }


        function LoadTable(filter) {
            let chartfilter = filter;

            if (chartfilter == '') {
                warning('Error', 'Error 404');
            } else {
                $.ajax({
                    type: 'POST',
                    url: '/salesdetails/getdescription',
                    data: {
                        chartfilter: chartfilter,
                    },
                    success: function (result) {
                        if (result.msg == 'success') {
                            const groupedSalesItems = processSalesDataTable(result.data);

                            if (groupedSalesItems && groupedSalesItems.length > 0) {
                                populateSalesTable(groupedSalesItems);
                            } else {
                            }
                        }
                    },
                    error: function (err) {
                        errormsg(err);
                    }
                });
            }
        }

        function populateSalesTable(data) {
            const tableBody = $('#sales-dataTable tbody');
            tableBody.empty();
            console.log(data);
            if (data.length === 0) {
                const noDataRow = $('<tr>').append(
                    $('<td>', { colspan: 3, text: 'No data available', class: 'no-data-row' })
                );
                tableBody.append(noDataRow);
            } else {
                data.forEach(item => {
                    const tr = $('<tr>').append(
                        $('<td>', { text: item.name, 'data-label': 'Name', class: 'custom-mobile-align' }),
                        $('<td>', { text: item.totalQuantity, 'data-label': 'Total Quantity', class: 'custom-mobile-align' }),
                        $('<td>', { text: 'â‚±' + item.totalPrice.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,'), 'data-label': 'Total Price', class: 'custom-mobile-align' })
                    );

                    tableBody.append(tr);
                });
            }
        }

        function filterTableRows() {
            const searchQuery = $('#search-input').val().trim().toLowerCase();
            let foundMatches = false;

            $('#no-match-row').remove();

            $('#sales-dataTable tbody tr').each(function() {
                const rowData = $(this).text().toLowerCase();
                if (rowData.includes(searchQuery)) {
                    $(this).show();
                    foundMatches = true;
                } else {
                    $(this).hide();
                }
            });

            if (!foundMatches) {
                const noMatchRow = $('<tr>').append(
                    $('<td>', {
                        colspan: 9,
                        class: 'text-center',
                        text: 'No Data Matched'
                    })
                );
                $('#sales-dataTable tbody').append(noMatchRow);
                noMatchRow.attr('id', 'no-match-row');
            }
        }

        $('#search-input').on('input', filterTableRows);

        function renderLineChart(data) {
            const labels = data.map(item => item.month);
            const quantities = data.map(item => item.price);

            const ctx = document.getElementById('salesChart').getContext('2d');

            const gradient = ctx.createLinearGradient(0, 0, 0, ctx.canvas.height);
            gradient.addColorStop(0, 'rgba(156, 44, 61, 0.85)'); 
            gradient.addColorStop(1, 'rgba(156, 44, 61, 0.05)');   

            const chart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Total Monthly Sales â‚±',
                        data: quantities, 
                        borderColor: 'rgb(156, 44, 61, 0.80)',
                        backgroundColor: gradient,
                        borderWidth: 2, 
                        fill: true,
                        lineTension: 0.4
                    }]
                },
                options: {
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            grid: {
                                display: false,
                            },
                        },
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return 'â‚±' + value.toLocaleString(); 
                                }
                            }
                        }
                    }
                }
            });
        }

        function LoadYearly() {
            $.ajax({
                url: '/salesdetails/yearly',
                method: 'GET',
                dataType: 'json',
                success: function(data) {
                    if (data.msg === 'success') {
                        const monthlyPrices = {}; 

                        const months = [
                            'January', 'February', 'March', 'April', 'May', 'June',
                            'July', 'August', 'September', 'October', 'November', 'December'
                        ];

                        months.forEach(month => {
                            monthlyPrices[month] = 0;
                        });

                        data.data.forEach(entry => {
                            const date = new Date(entry.date);
                            const month = date.toLocaleString('en-US', { month: 'long' });
                            const description = JSON.parse(entry.description);

                            const totalPrice = description.reduce((acc, product) => acc + (product.price * product.quantity), 0);

                            monthlyPrices[month] += totalPrice; 
                        });

                        const monthlyPricesArray = Object.keys(monthlyPrices).map(month => ({
                            month: month,
                            price: monthlyPrices[month] 
                        }));
                        renderLineChart(monthlyPricesArray);
                        console.log(monthlyPricesArray);
                    } else {
                        console.error(data.msg);
                    }
                },
                error: function(error) {
                    console.error(error);
                }
            });
        }

    });
</script>