<script>
    $(document).ready(function () {
        const date = new Date();
        const month = date.getMonth();
        let currentFilter = 'daily';
        let topSellersChart = null;
        let grossSalesChart;
        let paymentSalesChart;
        let activeDiscounts = [];
        let discounts = 0;
        let grosssales = 0;
        let refunds = 0;

        LoadList();
        BranchesSales();

        //#region Date Ranger Picker
        $('#dateRange').daterangepicker({
            opens: 'right',
            startDate: moment().subtract(7, 'days'),
            endDate: moment(),
            maxDate: moment(),
            // ranges: {
            //     'Today': [moment(), moment()],
            //     'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
            //     'This Week': [moment().startOf('week'), moment().endOf('week')],
            //     'Last Week': [moment().subtract(1, 'week').startOf('week'), moment().subtract(1, 'week').endOf('week')],
            //     'This Month': [moment().startOf('month'), moment().endOf('month')],
            //     'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')],
            //     'Last 3 Months': [moment().subtract(3, 'months').startOf('month'), moment().endOf('month')],
            // },
            alwaysShowCalendars: true,
            showCustomRangeLabel: false,
            buttonClasses: ['btn btn-outline-inventory'],
            applyButtonClasses: ['test'],
            locale: {
                format: 'MMM D, YYYY'
            }
        });

        $('#adjustDateBackward').on('click', function () {
            var startDate = $('#dateRange').data('daterangepicker').startDate;
            var endDate = $('#dateRange').data('daterangepicker').endDate.clone().subtract(7, 'days');
            $('#dateRange').data('daterangepicker').setEndDate(endDate);
            $('#dateRange').data('daterangepicker').setStartDate(startDate.clone().subtract(7, 'days'));

            refreshData(dateRange);
        });

        $('#adjustDateForward').on('click', function () {
            var startDate = $('#dateRange').data('daterangepicker').startDate;
            var endDate = $('#dateRange').data('daterangepicker').endDate.clone().add(7, 'days');
            $('#dateRange').data('daterangepicker').setStartDate(startDate.clone().add(7, 'days'));
            $('#dateRange').data('daterangepicker').setEndDate(endDate);

            refreshData(dateRange);
        });

        const initialdate = $('#dateRange').val();
        const initialbranch = $('#branchid').val();
        TopSellersData(initialdate);
        SalesDetailsChart(initialdate);
        getSalesDetails(initialdate)
        PaymentSales(initialdate, initialbranch);

        $(document).on('click', '.applyBtn', function () {
            // console.log(dateRange);
            refreshData(dateRange);
        });

        function refreshData(daterange) {
            const dateRange = $('#dateRange').val();
            const cashiername = $('#cashierid').val();
            const branch = $('#branchid').val();

            if (topSellersChart) {
                topSellersChart.destroy();
                topSellersChart = null;
            }

            if (grossSalesChart) {
                grossSalesChart.destroy();
                grossSalesChart = null;
            }

            if (paymentSalesChart) {
                paymentSalesChart.destroy();
                paymentSalesChart = null;
            }

            TopSellersData(dateRange);
            SalesDetailsChart(dateRange);
            getSalesDetails(dateRange)
            PaymentSales(dateRange, branch);

            $('.branchid').text('No Data');
            $('.totalsales').text('No Data');
            $('.commission').text('No Data');

            if (cashiername != '') {
                displayEmployeeData(cashiername, dateRange);
            } else {
                const tableBody = document.querySelector('#employees-table tbody');

                while (tableBody.firstChild) {
                    tableBody.removeChild(tableBody.firstChild);
                }

                const noDataRow = tableBody.insertRow();
                const noDataCell = noDataRow.insertCell(0);
                noDataCell.colSpan = 3;
                noDataCell.textContent = "Please Select a Cashier to display Data";
                return;
            }
            $('.date').text(dateRange);
        }

        $('#pills-tab a').on('shown.bs.tab', function (e) {
            var targetTabId = $(e.target).attr('href');
            if (targetTabId === "#employee-sales") {
                if (topSellersChart) {
                    topSellersChart.destroy();
                    topSellersChart = null;
                }
            }
        });

        //#endregion

        //#region SalesDetailsChart
        function SalesDetailsChart(daterange) {
            let formattedDate = formatDate(daterange);

            if (daterange == '') {
                warning('Error', 'No Date Found')
            } else {
                $.ajax({
                    type: 'POST',
                    url: '/salesdetails/gettotalsold',
                    data: {
                        daterange: formattedDate,
                    },
                    success: function (result) {
                        let sDate = moment(daterange.split(' - ')[0], 'MMM D, YYYY').format('YYYY-MM-DD');
                        let eDate = moment(daterange.split(' - ')[1], 'MMM D, YYYY').format('YYYY-MM-DD');
                        let filteredData = {};

                        // console.log(result.data)
                        let currentDate = moment(sDate);
                        while (currentDate.isSameOrBefore(eDate, 'day')) {
                            filteredData[currentDate.format('YYYY-MM-DD')] = { total: 0 };
                            currentDate.add(1, 'days');
                        }

                        result.data.forEach(item => {
                            let date = item.date.split(' ')[0];

                            if (!filteredData[date]) {
                                filteredData[date] = { total: 0 };
                            }

                            filteredData[date].total += parseFloat(item.total);
                        });

                        // console.log("Filtered Data:", filteredData);

                        let labels = [];
                        let data = [];

                        // Populate labels and data arrays with filtered data
                        Object.keys(filteredData).forEach(date => {
                            labels.push(date);
                            data.push(filteredData[date].total);
                        });

                        // Create a Chart.js chart
                        let ctx = document.getElementById('grosssaleschart').getContext('2d');

                        if (!grossSalesChart) {
                            grossSalesChart = new Chart(ctx, {
                                type: 'line',
                                data: {
                                    labels: labels,
                                    datasets: [{
                                        label: 'Gross Sales',
                                        data: data,
                                        borderColor: 'rgb(52, 177, 170, 0.85)',
                                        fill: 'false',
                                        lineTension: 0.4

                                    }]
                                }, options: {
                                    maintainAspectRatio: false,
                                    plugins: {
                                        legend: {
                                            display: false,
                                        }
                                    },
                                    scales: {
                                        x: {
                                            grid: {
                                                display: false,
                                            },
                                            offset: true,
                                        },
                                        y: {
                                            grid: {
                                                display: false,
                                            },
                                            ticks: {
                                                callback: function (value, index, values) {
                                                    return formatCurrency(value);
                                                }
                                            }
                                        },
                                    }
                                }
                            });
                        }
                    }, error: function (err) {
                        warning(err);
                    }
                });
            }
        }
        //#endregion 

        //#region Employee Reports
        $(document).on('change', '#cashierid', function () {
            let cashiername = $(this).val();
            let dateRange = $('#dateRange').val();
            $('.date').text(dateRange);
            // console.log("Cashier Name: ", cashiername, "Date Range: ", dateRange)

            $('.branchid').text('No Data');
            $('.totalsales').text('No Data');
            displayEmployeeData(cashiername, dateRange);
        });

        $(document).on('change', '#branchid', function () {
            let branch = $(this).val();
            let dateRange = $('#dateRange').val();

            if (paymentSalesChart) {
                paymentSalesChart.destroy();
                paymentSalesChart = null;
            }

            $('.branchid').text('No Data');
            $('.totalsales').text('No Data');
            
            PaymentSales(dateRange, branch);
        });

        function displayEmployeeData(cashier, dateRange) {
            let startDate = moment(dateRange.split(' - ')[0], 'MMM D, YYYY').format('MM/DD/YYYY');
            let endDate = moment(dateRange.split(' - ')[1], 'MMM D, YYYY').format('MM/DD/YYYY');
            let formattedDate = startDate + ' - ' + endDate;
            let employeeData = [];
            $.ajax({
                url: '/shiftreports/getemployeesales',
                method: 'POST',
                data: {
                    cashier: cashier,
                    daterange: formattedDate,
                },
                success: function (data) {
                    let employeeData = data.data;
                    populateSoldItemsEmployee(employeeData);
                    // console.log(employeeData);
                    let totalsales = 0;
                    
                    employeeData.forEach(item => {
                        let sales = parseFloat(item.total);
                        totalsales += sales;
                    })
                    if (data.data != 0) {
                        $('.branchid').text(employeeData[0].branch);
                        $('.totalsales').text(formatCurrency(totalsales));
                        $('.commission').text(formatCurrency(totalsales * 0.04));
                        
                    }
                },
                error: function (error) {
                    console.error(error);
                }
            });
        }

        function populateSoldItemsEmployee(data) {
            // console.log(data)
            const mergedData = {};

            const tableBody = document.querySelector('#employees-table tbody');

            while (tableBody.firstChild) {
                tableBody.removeChild(tableBody.firstChild);
            }

            if (data.length === 0) {
                const noDataRow = tableBody.insertRow();
                const noDataCell = noDataRow.insertCell(0);
                noDataCell.colSpan = 3;
                noDataCell.textContent = "No Sales at this Date";
                $('.overallTotal').text(formatCurrency(0));
                return;
            }
            data.forEach(item => {
                const parsedItem = JSON.parse(item.description);

                parsedItem.forEach(product => {
                    const { name, price, quantity } = product;

                    if (mergedData[name]) {
                        mergedData[name].quantity += quantity;
                        mergedData[name].price += price * quantity;
                    } else {
                        mergedData[name] = { quantity, price: price * quantity };
                    }

                });
            });

            const sortedProducts = Object.entries(mergedData)
                .map(([productName, productDetails]) => ({ productName, ...productDetails }))
                .sort((a, b) => b.quantity - a.quantity);

            for (const product of sortedProducts) {
                const newRow = tableBody.insertRow();

                const nameCell = newRow.insertCell(0);
                const priceCell = newRow.insertCell(1);
                const quantityCell = newRow.insertCell(2);

                nameCell.textContent = product.productName;
                priceCell.textContent = formatCurrency(product.price);
                quantityCell.textContent = product.quantity;
            }
        }

        function LoadList() {
            $.ajax({
                type: 'GET',
                url: '/discount/load',
                success: function (result) {
                    var data = result.data;

                    $.each(data, function (key, item) {
                        if (item.status == "ACTIVE") {
                            activeDiscounts.push(item.name)
                        }
                    });
                },
                error: function (err) {
                    warning(err);
                }
            });

            $.ajax({
                type: 'POST',
                url: '/salesdetails/load',
                success: function (result) {
                    var data = result.data;
                    var uniqueCashiers = [];

                    $.each(data, function (key, item) {
                        if (uniqueCashiers.indexOf(item.cashier) === -1) {
                            uniqueCashiers.push(item.cashier);

                            var listItem = $('<li></li>')
                                .text(item.cashier.toUpperCase())
                                .data('cashierid', item.cashier);

                            $('.cashierlist').append(listItem);
                        }
                    });

                    $('.cashierlist').on('click', 'li', function () {
                        var selectedOption = $(this).text();
                        var selectedcashierId = $(this).data('cashierid');

                        $('#selectedcashier').text(selectedOption);
                        $('#cashierid').val(selectedcashierId).change();
                    });
                },
                error: function (err) {
                    warning(err);
                }
            });

            $.ajax({
                type: 'GET',
                url: '/branch/load',
                success: function (result) {
                    const data = result.data;

                    const allBranchOption = $('<li></li>')
                        .text('All Branch')
                        .data('branchid', ''); 

                    $('.branchlist').append(allBranchOption);

                    $.each(data, function (key, item) {
                        if(item.status == 'ACTIVE'){
                            const listItem = $('<li></li>')
                                .text(item.branchname)
                                .data('branchid', item.branchid);

                            $('.branchlist').append(listItem);
                        }
                    });

                    $('.branchlist').on('click', 'li', function () {
                        const selectedOption = $(this).text();
                        const selectedbranchId = $(this).data('branchid');
                        $("#payment-branch-name").text(selectedOption)
                        
                        $('#selectedbranch').text(selectedOption);
                        $('#branchid').val(selectedbranchId).change();
                    });
                },
                error: function (err) {
                    warning(err);
                }
            });
        }

        $('#convertopdf').on('click', function () {
            let dateRange = $('#dateRange').val();
            let cashier = $('#cashierid').val();

            let message = "";
            if (cashier == "" || cashier == null || cashier == undefined) {
                message += "Empty Cashier field!"
            }

            if (message != '') {
                warning('Required', `Please fill up ${message}`);
            } else {
                let startDate = moment(dateRange.split(' - ')[0], 'MMM D, YYYY').format('MM/DD/YYYY');
                let endDate = moment(dateRange.split(' - ')[1], 'MMM D, YYYY').format('MM/DD/YYYY');
                let formattedDate = startDate + ' - ' + endDate;

                $.ajax({
                    url: '/shiftreports/getemployeesales',
                    method: 'POST',
                    data: {
                        cashier: cashier,
                        daterange: formattedDate,
                    },
                    success: function (data) {
                        let employeeData = data.data;
                        let processeddata = processPdfData(employeeData);
                        let template = "EMPLOYEE SALES REPORT";
                        let category = '';
                        let branch = employeeData[0].branch;
                        console.log("processed data:", processeddata)

                        if (data.msg == "success") {
                            if (processeddata.length != 0) {
                                $.ajax({
                                    type: "POST",
                                    url: "/pdf/processpdfdata",
                                    data: {
                                        processeddata: processeddata,
                                        template: template,
                                        category: category,
                                        date: formattedDate,
                                        branch: branch,
                                        employee: cashier,
                                    },
                                    success: function (result) {
                                        // console.log("MSG: ", result.msg)
                                        if (result.msg == "success") {
                                            window.open(`/pdf/generatepdf`, "_blank");
                                            success("Success", "PDF generate successfully!");
                                        }
                                    },
                                    error: function (err) {
                                        warning(err);
                                    },
                                });
                            }
                        } else {
                            warning("Notice", "No Data within in the date range.")
                        }
                    },
                    error: function (error) {
                        console.error(error);
                    }
                });

            }
        });

        function processPdfData(data) {
            const mergedData = {};

            data.forEach(item => {
                const parsedItem = JSON.parse(item.description);

                parsedItem.forEach(product => {
                    const { name, price, quantity } = product;

                    if (mergedData[name]) {
                        mergedData[name].quantity += quantity;
                        mergedData[name].price += price * quantity;
                    } else {
                        mergedData[name] = { quantity, price: price * quantity };
                    }

                });
            });

            const sortedProducts = Object.entries(mergedData)
                .map(([productName, productDetails]) => ({ productName, ...productDetails }))
                .sort((a, b) => b.quantity - a.quantity);

            return sortedProducts;
        }
        //#endregion

        //#region Top Sellers
        function TopSellersData(daterange) {
            let formattedDate = formatDate(daterange);
            if (daterange == '') {
                warning('Error', 'No Date Found')
            } else {
                $.ajax({
                    type: 'POST',
                    url: '/salesdetails/getdescription',
                    data: {
                        daterange: formattedDate,
                    },
                    success: function (result) {
                        // console.log(result.data)
                        if (result.msg == 'success') {
                            populateSoldItemsTable(result.data);

                            let topSalesItems = processSalesData(result.data);
                            // console.log(topSalesItems);
                            if (topSalesItems && topSalesItems.length > 0) {
                                let labels = topSalesItems.map(item => item.name);
                                let totalQuantity = topSalesItems.map(item => item.totalQuantity);
                                if (!topSellersChart) {
                                    let ctx = document.getElementById('topSellersChart').getContext('2d');
                                    let chartdata = {
                                        labels: labels,
                                        datasets: [{
                                            label: 'Total Sales',
                                            data: totalQuantity,
                                            backgroundColor: [
                                                'rgb(87, 125, 134)',
                                                'rgb(86, 157, 170)',
                                                'rgb(135, 203, 185)',
                                                'rgb(100, 204, 197, 0.75)',
                                                'rgb(185, 237, 221)',
                                            ],
                                        }]
                                    };

                                    let config = {
                                        type: 'bar',
                                        data: chartdata,
                                        options: {
                                            maintainAspectRatio: false,
                                            scales: {
                                                x: {
                                                    barPercentage: 0.5,
                                                    grid: {
                                                        display: false,
                                                    },
                                                },
                                                y: {
                                                    ticks: {
                                                        callback: function (value, index, values) {
                                                            return `${value.toLocaleString(undefined, { maximumFractionDigits: 0 })}`;
                                                        }
                                                    }
                                                }
                                            },
                                            animation: {
                                                duration: 1000,
                                                easing: 'easeInOutQuad'
                                            },
                                            plugins: {
                                                legend: {
                                                    labels: {
                                                        font: {
                                                            family: 'Open Sans',
                                                            size: 14 // Set the font size here
                                                        }
                                                    }
                                                },
                                                scales: {
                                                    x: {
                                                        ticks: {
                                                            font: {
                                                                family: 'Open Sans',
                                                                size: 12
                                                            }
                                                        }
                                                    },
                                                    y: {
                                                        ticks: {
                                                            font: {
                                                                family: 'Open Sans',
                                                                size: 12
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    };

                                    topSellersChart = new Chart(ctx, config);
                                } else {
                                    topSellersChart.data.labels = labels;
                                    topSellersChart.data.datasets[0].data = totalQuantity;
                                    topSellersChart.update({
                                        duration: 1000,
                                        easing: 'easeInOutQuad'
                                    });
                                }
                                $('#chartContainer').show();
                                $('#noDataMessage').hide();
                            } else {
                                $('#chartContainer').hide();
                                $('#noDataMessage').show();
                                // console.log('No data available.');
                            }
                        }
                    },
                    error: function (err) {
                        warning(err);
                    }
                });
            }
        }

        function populateSoldItemsTable(data) {
            // console.log("Details: ", data);
            const mergedData = {};
            let overallTotalPrice = 0;

            const tableBody = document.querySelector('#sales-table tbody');

            while (tableBody.firstChild) {
                tableBody.removeChild(tableBody.firstChild);
            }

            if (data.length === 0) {
                const noDataRow = tableBody.insertRow();
                const noDataCell = noDataRow.insertCell(0);
                noDataCell.colSpan = 3;
                noDataCell.textContent = "No Data Found";
                $('.overallTotal').text(formatCurrency(0));
                return;
            }

            data.forEach(item => {
                const parsedItem = JSON.parse(item.st_description);

                parsedItem.forEach(product => {
                    const { name, price, quantity } = product;

                    let shouldIncludeProduct = true;
                    activeDiscounts.forEach(discount => {
                        if (name.toLowerCase().includes(discount.toLowerCase())) {
                            shouldIncludeProduct = false;
                        }
                    });

                    if (shouldIncludeProduct) {
                        if (mergedData[name]) {
                            mergedData[name].quantity += quantity;
                            mergedData[name].price += price * quantity;
                        } else {
                            mergedData[name] = { quantity, price: price * quantity };
                        }
                        overallTotalPrice += price * quantity;
                        $('.overallTotal').text(formatCurrency(overallTotalPrice));
                    }
                });
            });

            const sortedProducts = Object.entries(mergedData)
                .map(([productName, productDetails]) => ({ productName, ...productDetails }))
                .sort((a, b) => b.quantity - a.quantity);

            for (const product of sortedProducts) {
                const newRow = tableBody.insertRow();

                const nameCell = newRow.insertCell(0);
                const priceCell = newRow.insertCell(1);
                const quantityCell = newRow.insertCell(2);

                nameCell.textContent = product.productName;
                priceCell.textContent = formatCurrency(product.price);
                quantityCell.textContent = product.quantity;
            }
        }

        function processSalesData(data) {
            const items = {};

            data.forEach(entry => {
                const itemsArray = JSON.parse(entry.st_description);
                itemsArray.forEach(item => {
                    let shouldIncludeItem = true;
                    activeDiscounts.forEach(discount => {
                        if (item.name.toLowerCase().includes(discount.toLowerCase())) {
                            shouldIncludeItem = false;
                        }
                    });

                    if (shouldIncludeItem) {
                        if (!items[item.name]) {
                            items[item.name] = {
                                name: item.name,
                                totalQuantity: item.quantity
                            };
                        } else {
                            items[item.name].totalQuantity += item.quantity;
                        }
                    }
                });
            });

            const aggregatedItems = Object.values(items);

            aggregatedItems.sort((a, b) => b.totalQuantity - a.totalQuantity);

            const topItems = aggregatedItems.slice(0, 5);
            return topItems;
            console.log(topItems);
        }
        //#endregion

        //#region branches Sales
        function BranchesSales() {
            $.ajax({
                url: '/salesdetails/yearly',
                method: 'GET',
                dataType: 'json',
                success: function (data) {
                    if (data.msg === 'success') {
                        const branches = {};
                        let overallTotal = 0;

                        data.data.forEach(item => {
                            if (!branches[item.branch]) {
                                branches[item.branch] = Array(12).fill(0);
                            }
                            branches[item.branch][item.month - 1] += item.total;
                            overallTotal += item.total;
                        });

                        // console.log(branches)
                        const arrayColor = [
                            'rgb(11, 191, 185)',
                            'rgb(245, 32, 138)',
                            'rgb(252, 102, 33)',
                            'rgb(242, 75, 75)',
                            'rgb(255, 188, 66)'
                        ];

                        const datasets = [];
                        let index = 0;

                        // Populate the branches list using jQuery
                        const branchesList = $('#branches-pill-tab');
                        branchesList.empty(); 

                        for (const branch in branches) {
                            const totalSales = branches[branch].reduce((acc, val) => acc + val, 0);
                            const listItem = $('<li>').addClass('nav-item sales-options text-center mb-1');
                            const anchor = $('<a>').addClass('sales-link active').attr({
                                'data-toggle': 'pill',
                                'href': `#${branch.replace(/[^a-zA-Z0-9]/g, '')}`,
                                'role': 'tab',
                                'aria-controls': branch.replace(/[^a-zA-Z0-9]/g, ''),
                                'aria-selected': 'true'
                            }).html(`<span>${branch}</span><br><span>${formatCurrency(totalSales)}</span>`);
                            listItem.append(anchor);
                            branchesList.append(listItem);

                            // Create dataset for chart
                            const dataset = {
                                label: branch,
                                data: branches[branch],
                                borderColor: arrayColor[index % arrayColor.length],
                                backgroundColor: arrayColor[index % arrayColor.length],
                                borderWidth: 2,
                                fill: false,
                                lineTension: 0.4
                            };
                            datasets.push(dataset);
                            index++;
                        }

                        renderBranchesChart(datasets);
                    } else {
                        console.error(data.msg);
                    }
                },
                error: function (error) {
                    console.error(error);
                }
            });
        }

        function renderBranchesChart(data) {
            const months = [
                'January', 'February', 'March', 'April', 'May', 'June',
                'July', 'August', 'September', 'October', 'November', 'December'
            ];

            const ctx = document.getElementById('salesChart').getContext('2d');

            const chart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: months,
                    datasets: data
                },
                options: {
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            grid: {
                                display: false,
                            },
                            offset: true,
                        },
                        y: {
                            grid: {
                                display: false,
                            },
                            ticks: {
                                callback: function (value, index, values) {
                                    return formatCurrency(value);
                                }
                            }
                        },
                    }
                }
            });
        }
        //#endregion

        //#region Payment Sales
        function PaymentSales(date, branch) {
            $.ajax({
                url: '/salesdetails/payment-sales',
                method: 'POST',
                data: {
                    dateRange: date,
                    branch: branch,
                },
                success: function (data) {
                    let salesData = data.overallTotals;
                    const graphData = data.data;
                    const paymentList = $('#payment-sales-pills-tab');

                    paymentList.empty();
                    if (data.msg === 'success') {
                        // console.log(data.data, data.overallTotals)

                        if (salesData && Object.keys(salesData).length > 0) {
                            Object.keys(salesData).forEach((paymentType) => {
                                const listItem = $('<li>').addClass('nav-item sales-options text-center mb-1');
                                const anchorTag = $('<a>').addClass('sales-link active')
                                    .attr('data-toggle', 'pill')
                                    .attr('href', '#')
                                    .attr('role', 'tab')
                                    .attr('aria-controls', 'payment-sales')
                                    .attr('aria-selected', 'true')
                                    .html(`<span>${paymentType}</span><br><span id="${paymentType}-amount">${formatCurrency(salesData[paymentType])}</span>`);
                                listItem.append(anchorTag);
                                paymentList.append(listItem);
                            });
                        } else {
                            paymentList.append($('<li>').addClass('nav-item sales-options text-center mt-4').text('No Data'));
                        }

                        // console.log("Graph Data:", graphData)
                        if (graphData != '') {
                            plotPaymentSalesChart(graphData)
                        }
                    } else{
                        paymentList.append($('<li>').addClass('nav-item sales-options text-center mt-4').text('No Data'));
                    }

                },
                error: function (error) {
                    console.error(error);
                }
            });
        }

        function plotPaymentSalesChart(data) {
            const arrayColor = [
                'rgb(11, 191, 185)',
                'rgb(245, 32, 138)',
                'rgb(252, 102, 33)',
                'rgb(242, 75, 75)',
                'rgb(255, 188, 66)',
                'rgb(142, 255, 66)',
                'rgb(66, 255, 192)',
            ];

            const dates = Object.keys(data);
            const paymentTypes = Object.keys(data[dates[0]]);

            const datasets = paymentTypes.map((type, index) => ({
                label: type,
                data: dates.map((date) => data[date][type]),
                borderColor: arrayColor[index % arrayColor.length],
                fill: false,
                lineTension: 0.4
            }));

            const ctx = document.getElementById('payment-sales-chart').getContext('2d');
            if (!paymentSalesChart) {
                paymentSalesChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: dates,
                        datasets: datasets,
                    },
                    options: {
                        maintainAspectRatio: false,
                        responsive: true,
                        plugins: {
                            legend: {
                                display: false,
                            }
                        },
                        title: {
                            display: true,
                            text: 'Payment Sales Chart',
                        },
                        scales: {
                            x: {
                                display: true,
                                title: {
                                    display: true,
                                    text: 'Date',
                                },
                                grid: {
                                    display: false,
                                },
                                offset: true,
                            },
                            y: {
                                display: true,
                                title: {
                                    display: true,
                                    text: 'Amount',
                                },
                                grid: {
                                    display: false,
                                },
                                ticks: {
                                    callback: function (value, index, values) {
                                        return formatCurrency(value);
                                    }
                                }
                            },
                        },
                    },
                });
            }
        }

        //#endregion

        //#region Sales Details
        function getSalesDetails(date) {
            let formattedDate = formatDate(date);

            $.ajax({
                type: 'POST',
                url: '/salesdetails/get-sales-details',
                data: {
                    daterange: formattedDate,
                },
                success: function (result) {
                    let defaultValues = {
                        GrossProfit: 0,
                        GrossSales: 0,
                        NetSales: 0,
                        Refunds: 0,
                        Discounts: 0
                    };

                    let data = result.msg === "success" ? result.data[0] : defaultValues;

                    updateCurrencyValues(data);
                },
                error: function (err) {
                    warning(err);
                    updateCurrencyValues();
                }
            });
        }

        function updateCurrencyValues(data) {
            let elementsToUpdate = {
                "#gross-profit-total": data.GrossProfit,
                "#gross-sales-total": data.GrossSales,
                "#net-sales-total": data.NetSales,
                "#refunds-total": data.Refunds,
                "#discounts-total": data.Discounts
            };

            for (let [elementId, value] of Object.entries(elementsToUpdate)) {
                $(elementId).text(formatCurrency(value));
            }
        }
        //#endregion

        //#region Date Formatting
        function formatDate(date) {
            let startDate = moment(date.split(' - ')[0], 'MMM D, YYYY').format('MM/DD/YYYY');
            let endDate = moment(date.split(' - ')[1], 'MMM D, YYYY').format('MM/DD/YYYY');
            let formattedDate = startDate + ' - ' + endDate;

            return formattedDate;
        }
        //#endregion

    });
</script>