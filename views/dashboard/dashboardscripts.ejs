<script>
    $(document).ready(function () {

        $('#dateRange').daterangepicker({
            opens: 'right',
            startDate: moment().subtract(7, 'days'), 
            endDate: moment(), 
            maxDate: moment(),
            ranges: {
                'Today': [moment(), moment()],
                'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                'This Week': [moment().startOf('week'), moment().endOf('week')],
                'Last Week': [moment().subtract(1, 'week').startOf('week'), moment().subtract(1, 'week').endOf('week')],
                'This Month': [moment().startOf('month'), moment().endOf('month')],
                'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')],
                'Last 3 Months': [moment().subtract(3, 'months').startOf('month'), moment().endOf('month')],
            },
            alwaysShowCalendars: true,
            showCustomRangeLabel: false,
            buttonClasses: ['btn btn-outline-inventory'],
            locale: {
                format: 'MMM D, YYYY'
            }
        });

        $('#adjustDateBackward').on('click', function() {
            var startDate = $('#dateRange').data('daterangepicker').startDate;
            var endDate = $('#dateRange').data('daterangepicker').endDate.clone().subtract(7, 'days');
            $('#dateRange').data('daterangepicker').setEndDate(endDate);
            $('#dateRange').data('daterangepicker').setStartDate(startDate.clone().subtract(7, 'days'));
        });

        $('#adjustDateForward').on('click', function() {
            var startDate = $('#dateRange').data('daterangepicker').startDate;
            var endDate = $('#dateRange').data('daterangepicker').endDate.clone().add(7, 'days');
            $('#dateRange').data('daterangepicker').setStartDate(startDate.clone().add(7, 'days'));
            $('#dateRange').data('daterangepicker').setEndDate(endDate);
        });

        const date = new Date();
        const month = date.getMonth();
        let currentFilter = 'daily';
        let myChart = null;
        LoadYearly();
        LoadList();
        let initialdate = $('#dateRange').val();
        getData(initialdate);

        $(document).on('change', '#dateRange', function() {
            let dateRange = $(this).val();
            let cashiername = $('#cashierid').val();
            console.log(dateRange);
            if (myChart) {
                myChart.destroy();
                myChart = null;
            }
            getData(dateRange);

            $('.branchid').text('No Data');
            $('.totalsales').text('No Data');
            if(cashiername != ''){
                displayEmployeeData(cashiername, dateRange);
            }
            $('.date').text(dateRange);
        });

        $(document).on('change', '#cashierid', function() {
            let cashiername = $(this).val();
            let dateRange = $('#dateRange').val();
            $('.date').text(dateRange);
            console.log("Cashier Name: ", cashiername, "Date Range: ", dateRange)

            displayEmployeeData(cashiername, dateRange);
        });

        $('#pills-tab a').on('shown.bs.tab', function (e) {
            var targetTabId = $(e.target).attr('href');
            if (targetTabId === "#employee-sales") {
                if (myChart) {
                    myChart.destroy();
                    myChart = null;
                }
            }
        });

        // $(document).on('click', '#top-sellers-tab', function() {
        //     getData(initialdate);
        // });

        function displayEmployeeData(cashier, dateRange) {
            let startDate = moment(dateRange.split(' - ')[0], 'MMM D, YYYY').format('MM/DD/YYYY');
            let endDate = moment(dateRange.split(' - ')[1], 'MMM D, YYYY').format('MM/DD/YYYY');
            let formattedDate = startDate + ' - ' + endDate;
            let employeeData = [];
            $.ajax({
                url: '/shiftreports/getemployeesales',
                method: 'POST',
                data: {
                    cashier: cashier,
                    daterange: formattedDate,
                },
                success: function (data) {
                    let employeeData = data.data;
                    populateSoldItemsEmployee(employeeData);
                    console.log(employeeData);
                    let totalsales = 0;
                    employeeData.forEach(item =>{
                        let sales = parseFloat(item.total);
                        totalsales += sales;
                    })
                    if(data.data != 0){
                        $('.branchid').text(employeeData[0].branch);
                        $('.totalsales').text(formatCurrency(totalsales));
                    }
                },
                error: function (error) {
                    console.error(error);
                }
            });
        }

        function populateSoldItemsEmployee(data){
            console.log(data)
            const mergedData = {};

            const tableBody = document.querySelector('#employees-table tbody');

            while (tableBody.firstChild) {
                tableBody.removeChild(tableBody.firstChild);
            }

            if (data.length === 0) {
                const noDataRow = tableBody.insertRow();
                const noDataCell = noDataRow.insertCell(0);
                noDataCell.colSpan = 3;
                noDataCell.textContent = "No Data Found";
                $('.overallTotal').text(formatCurrency(0));
                return;
            }
            data.forEach(item => {
                const parsedItem = JSON.parse(item.description);

                parsedItem.forEach(product => {
                    const { name, price, quantity } = product;

                    if (mergedData[name]) {
                        mergedData[name].quantity += quantity;
                        mergedData[name].price += price * quantity;
                    } else {
                        mergedData[name] = { quantity, price: price * quantity };
                    }

                });
            });

            const sortedProducts = Object.entries(mergedData)
                .map(([productName, productDetails]) => ({ productName, ...productDetails }))
                .sort((a, b) => b.quantity - a.quantity);

            for (const product of sortedProducts) {
                const newRow = tableBody.insertRow();

                const nameCell = newRow.insertCell(0);
                const priceCell = newRow.insertCell(1);
                const quantityCell = newRow.insertCell(2);

                nameCell.textContent = product.productName;
                priceCell.textContent = formatCurrency(product.price);
                quantityCell.textContent = product.quantity;
            }
        }

        function populateSoldItemsTable(data) {
            // console.log("Details: ", data);
            const mergedData = {};
            let overallTotalPrice = 0;

            const tableBody = document.querySelector('#sales-table tbody');

            while (tableBody.firstChild) {
                tableBody.removeChild(tableBody.firstChild);
            }

            if (data.length === 0) {
                const noDataRow = tableBody.insertRow();
                const noDataCell = noDataRow.insertCell(0);
                noDataCell.colSpan = 3;
                noDataCell.textContent = "No Data Found";
                $('.overallTotal').text(formatCurrency(0));
                return;
            }

            data.forEach(item => {
                const parsedItem = JSON.parse(item.st_description);

                parsedItem.forEach(product => {
                    const { name, price, quantity } = product;

                    if (mergedData[name]) {
                        mergedData[name].quantity += quantity;
                        mergedData[name].price += price * quantity;
                    } else {
                        mergedData[name] = { quantity, price: price * quantity };
                    }
                    overallTotalPrice += price * quantity;
                    $('.overallTotal').text(formatCurrency(overallTotalPrice));
                });
            });

            const sortedProducts = Object.entries(mergedData)
                .map(([productName, productDetails]) => ({ productName, ...productDetails }))
                .sort((a, b) => b.quantity - a.quantity);

            for (const product of sortedProducts) {
                const newRow = tableBody.insertRow();

                const nameCell = newRow.insertCell(0);
                const priceCell = newRow.insertCell(1);
                const quantityCell = newRow.insertCell(2);

                nameCell.textContent = product.productName;
                priceCell.textContent = formatCurrency(product.price);
                quantityCell.textContent = product.quantity;
            }
        }

        function processSalesData(data) {
            const items = {};

            data.forEach(entry => {
                const itemsArray = JSON.parse(entry.st_description);
                itemsArray.forEach(item => {
                    if (!items[item.name]) {
                        items[item.name] = {
                            name: item.name,
                            totalQuantity: item.quantity
                        };
                    } else {
                        items[item.name].totalQuantity += item.quantity;
                    }
                });
            });

            const aggregatedItems = Object.values(items);

            aggregatedItems.sort((a, b) => b.totalQuantity - a.totalQuantity);
            // console.log("AggregatedItems: ", aggregatedItems);

            const topItems = aggregatedItems.slice(0, 5);

            return topItems;
        }

        function getData(daterange){
            let startDate = moment(daterange.split(' - ')[0], 'MMM D, YYYY').format('MM/DD/YYYY');
            let endDate = moment(daterange.split(' - ')[1], 'MMM D, YYYY').format('MM/DD/YYYY');
            let formattedDate = startDate + ' - ' + endDate;
            if(daterange == ''){
                warning('Error', 'No Date Found')
            } else{
                $.ajax({
                    type: 'POST',
                    url: '/salesdetails/getdescription',
                    data: {
                        daterange: formattedDate,
                    },
                    success: function (result) {
                        // console.log(result.data)
                        if (result.msg == 'success') {
                            populateSoldItemsTable(result.data);
                            const topSalesItems = processSalesData(result.data);
                            if (topSalesItems && topSalesItems.length > 0) {
                                const labels = topSalesItems.map(item => item.name);
                                const totalQuantity = topSalesItems.map(item => item.totalQuantity);
                                
                                if (!myChart) {
                                    const ctx = document.getElementById('myChart').getContext('2d');
                                    const chartdata = {
                                        labels: labels,
                                        datasets: [{
                                            label: 'Total Sales',
                                            data: totalQuantity,
                                            backgroundColor: [
                                                'rgb(87, 125, 134)',
                                                'rgb(86, 157, 170)',
                                                'rgb(135, 203, 185)',
                                                'rgb(100, 204, 197, 0.75)',
                                                'rgb(185, 237, 221)',
                                            ],
                                        }]
                                    };

                                    const config = {
                                        type: 'bar',
                                        data: chartdata,
                                        options: {
                                            maintainAspectRatio: false,
                                            scales: {
                                                x: {
                                                    barPercentage: 0.5,
                                                    grid: {
                                                        display: false,
                                                    },
                                                },
                                                y: {
                                                    ticks: {
                                                        callback: function (value, index, values) {
                                                            return `${value.toLocaleString(undefined, { maximumFractionDigits: 0 })}`;
                                                        }
                                                    }
                                                }
                                            },
                                            animation: {
                                                duration: 1000,
                                                easing: 'easeInOutQuad'
                                            },
                                            plugins: {
                                                legend: {
                                                    labels: {
                                                        font: {
                                                            family: 'Open Sans',
                                                            size: 14 // Set the font size here
                                                        }
                                                    }
                                                },
                                                scales: {
                                                    x: {
                                                        ticks: {
                                                            font: {
                                                                family: 'Open Sans',
                                                                size: 12
                                                            }
                                                        }
                                                    },
                                                    y: {
                                                        ticks: {
                                                            font: {
                                                                family: 'Open Sans',
                                                                size: 12
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    };

                                    myChart = new Chart(ctx, config);
                                } else {
                                    myChart.data.labels = labels;
                                    myChart.data.datasets[0].data = totalQuantity;
                                    myChart.update({
                                        duration: 1000,
                                        easing: 'easeInOutQuad'
                                    });
                                }
                                $('#chartContainer').show();
                                $('#noDataMessage').hide();
                            } else {
                                $('#chartContainer').hide();
                                $('#noDataMessage').show();
                                console.log('No data available.');
                            }
                        }
                    },
                    error: function (err) {
                        errormsg(err);
                    }
                });
            }
        }

        function filterTableRows() {
            const searchQuery = $('#search-input').val().trim().toLowerCase();
            let foundMatches = false;

            $('#no-match-row').remove();

            $('#sales-dataTable tbody tr').each(function () {
                const rowData = $(this).text().toLowerCase();
                if (rowData.includes(searchQuery)) {
                    $(this).show();
                    foundMatches = true;
                } else {
                    $(this).hide();
                }
            });

            if (!foundMatches) {
                const noMatchRow = $('<tr>').append(
                    $('<td>', {
                        colspan: 9,
                        class: 'text-center',
                        text: 'No Data Matched'
                    })
                );
                $('#sales-dataTable tbody').append(noMatchRow);
                noMatchRow.attr('id', 'no-match-row');
            }
        }

        $('#search-input').on('input', filterTableRows);

        function renderLineChart(data) {
            const months = [
                'January', 'February', 'March', 'April', 'May', 'June',
                'July', 'August', 'September', 'October', 'November', 'December'
            ];

            const ctx = document.getElementById('salesChart').getContext('2d');

            const chart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: months,
                    datasets: data
                },
                options: {
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            grid: {
                                display: false,
                            },
                            offset: true,
                        },
                        y: {
                            display: false,
                        },
                    }
                }
            });
        }

        function LoadYearly() {
            $.ajax({
                url: '/salesdetails/yearly',
                method: 'GET',
                dataType: 'json',
                success: function (data) {
                    if (data.msg === 'success') {
                        const branches = {};
                        let overallTotal = 0;
                        data.data.forEach(item => {
                            if (!branches[item.st_branch]) {
                                branches[item.st_branch] = Array(12).fill(0);
                            }
                            branches[item.st_branch][item.month - 1] += item.total;
                            overallTotal += item.total
                        });
                        console.log(overallTotal)
                        $('#annualearning').text(formatCurrency(overallTotal))
                        const datasets = [];
                        for (const branch in branches) {
                            let borderColor = "";
                            console.log(branch)
                            if (branch === '0002') {
                                borderColor = 'rgb(178, 83, 62)'; 
                            } else if (branch === '0003') {
                                borderColor = 'rgb(24, 61, 61)'; 
                            } else if (branch === null){
                                borderColor = 'rgb(37, 43, 72)';
                            }

                            const dataset = {
                                label: `Branch ${branch}`,
                                data: branches[branch],
                                borderColor: borderColor, 
                                backgroundColor: 'rgba(0, 0, 0, 0)',
                                borderWidth: 2,
                                fill: false,
                                lineTension: 0.4
                            };
                            datasets.push(dataset);
                        }
                        
                        console.log(month);
                        console.log(datasets)
                        let totalMonthlySale = 0; 

                        datasets.forEach(item => {
                            if (item.data && item.data.length > month && typeof item.data[month] === 'number') {
                                totalMonthlySale += item.data[month];
                            }
                            console.log(item.data[month])
                        });
                        $('#monthlyearning').text(formatCurrency(totalMonthlySale))
                        renderLineChart(datasets)
                    } else {
                        console.error(data.msg);
                    }
                },
                error: function (error) {
                    console.error(error);
                }
            });
        }

    });

    function LoadList() {
        $.ajax({
            type: 'GET',
            url: '/shiftreports/load',
            success: function (result) {
                var data = result.data;
                var uniqueCashiers = [];

                $.each(data, function (key, item) {
                    if (uniqueCashiers.indexOf(item.cashier) === -1) {
                        uniqueCashiers.push(item.cashier);

                        var listItem = $('<li></li>')
                            .text(item.cashier)
                            .data('cashierid', item.cashier);

                        $('.cashierlist').append(listItem);
                    }
                });

                $('.cashierlist').on('click', 'li', function () {
                    var selectedOption = $(this).text();
                    var selectedcashierId = $(this).data('cashierid');

                    $('#selectedcashier').text(selectedOption);
                    $('#cashierid').val(selectedcashierId).change();
                });
            },
            error: function (err) {
                errormsg(err);
            }
        });
    }

    
</script>