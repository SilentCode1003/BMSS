<script>
    $(document).ready(function () {
        let topSellersChart;
        let grossSalesChart;
        let paymentSalesChart;

        LoadList();
        // BranchesSales();

        //#region Date Ranger Picker
        $('#dateRange').daterangepicker({
            opens: 'right',
            startDate: moment().subtract(7, 'days'),
            endDate: moment(),
            maxDate: moment(),
            // ranges: {
            //     'Today': [moment(), moment()],
            //     'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
            //     'This Week': [moment().startOf('week'), moment().endOf('week')],
            //     'Last Week': [moment().subtract(1, 'week').startOf('week'), moment().subtract(1, 'week').endOf('week')],
            //     'This Month': [moment().startOf('month'), moment().endOf('month')],
            //     'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')],
            //     'Last 3 Months': [moment().subtract(3, 'months').startOf('month'), moment().endOf('month')],
            // },
            alwaysShowCalendars: true,
            showCustomRangeLabel: false,
            buttonClasses: ['btn btn-outline-inventory'],
            applyButtonClasses: ['test'],
            locale: {
                format: 'MMM D, YYYY'
            }
        });

        $('#adjustDateBackward').on('click', function () {
            var startDate = $('#dateRange').data('daterangepicker').startDate;
            var endDate = $('#dateRange').data('daterangepicker').endDate.clone().subtract(7, 'days');
            $('#dateRange').data('daterangepicker').setEndDate(endDate);
            $('#dateRange').data('daterangepicker').setStartDate(startDate.clone().subtract(7, 'days'));

            refreshData(dateRange);
        });

        $('#adjustDateForward').on('click', function () {
            var startDate = $('#dateRange').data('daterangepicker').startDate;
            var endDate = $('#dateRange').data('daterangepicker').endDate.clone().add(7, 'days');
            $('#dateRange').data('daterangepicker').setStartDate(startDate.clone().add(7, 'days'));
            $('#dateRange').data('daterangepicker').setEndDate(endDate);

            refreshData(dateRange);
        });
        //#endregion

        //#region Branch Selection
        $(document).on('change', '#branchid', function () {
            let branch = $(this).val();
            let dateRange = $('#dateRange').val();

            refreshData(dateRange, branch);
        });
        //#region 

        //#region Cashier Selection
        $(document).on('change', '#cashierid', function () {
            let cashiername = $(this).val();
            let dateRange = $('#dateRange').val();
            // console.log("Cashier Name: ", cashiername, "Date Range: ", dateRange)
            DisplayEmployeeData(cashiername, dateRange);
        });
        //#endregion

        //#region Initial Displays
        const InitialDate = $('#dateRange').val();

        SalesDetailsChart(InitialDate);
        getSalesDetails(InitialDate);
        TopSellersData(InitialDate);
        //#region 

        //#region Functions

        //#region Populate Top Selling Products Table
        function PopulateTopSellersTable(date, branch) {
            $.ajax({
                type: 'POST',
                url: '/salesdetails/top-sellers-table',
                data: {
                    daterange: date,
                    branch: branch,
                },
                success: function (result) {
                    let sortedProducts = result.data.sortedProducts;
                    let totalPrice = result.data.totalPrice;
                    // console.log(sortedProducts, totalPrice);

                    // console.log(data);
                    const tableBody = $('#top-selling-products-table tbody');
                    tableBody.empty();

                    if (sortedProducts.length === 0) {
                        const tr = $('<tr>').append($('<td>', {
                            colspan: 6,
                            class: 'text-center',
                            text: 'No Data Matched'
                        }));
                        tableBody.append(tr);
                    } else {
                        let index = 0;

                        async function generateTableData(sortedProducts) {
                            for (let index = 0; index < sortedProducts.length; index++) {
                                const item = sortedProducts[index];
                                let productImage = '';

                                try {
                                    const result = await getDataById(item.productId);
                                    if (result.image) {
                                        productImage = result.image;
                                        // console.log(productImage);
                                    }

                                    const imgElement = productImage
                                        ? $('<img>', { src: `data:image/jpeg;base64,${productImage}`, alt: 'Product Image', style: 'max-width: 28.9px; max-height: 28.9px; border-radius: 50%;' })
                                        : $('<span>', { text: 'No Image' });

                                    const tr = $('<tr>').append(
                                        $('<td>', { text: index + 1, 'data-label': 'Index', class: 'text-center w-10' }),
                                        $('<td>').append(imgElement),
                                        $('<td>', { 'data-label': 'Product Name', class: 'custom-mobile-align text-left' }).text(item.productName),
                                        $('<td>', { text: item.category, 'data-label': 'Category', class: 'custom-mobile-align text-left' }),
                                        $('<td>', { text: item.quantity, 'data-label': 'Quantity', class: 'custom-mobile-align text-left' }),
                                        $('<td>', { text: formatCurrency(item.price), 'data-label': 'Total Amount', class: 'custom-mobile-align text-left' }),
                                    );

                                    tableBody.append(tr);
                                } catch (error) {
                                    console.log('Error fetching data for product:', item.productName);
                                    console.error(error);
                                }
                            }
                        }
                        generateTableData(sortedProducts);
                    }
                },
                error: function (err) {
                    warning(err);
                }
            });
        }
        //#endregion

        //#region Refresh
        $(document).on('click', '.applyBtn', function () {
            // console.log(dateRange);
            refreshData(dateRange);
        });

        function refreshData(daterange, branch) {
            const dateRange = $('#dateRange').val();
            const cashiername = $('#cashierid').val();

            if (topSellersChart) {
                topSellersChart.destroy();
                topSellersChart = null;
            }

            if (grossSalesChart) {
                grossSalesChart.destroy();
                grossSalesChart = null;
            }

            if (paymentSalesChart) {
                paymentSalesChart.destroy();
                paymentSalesChart = null;
            }

            PopulateTopSellersTable(dateRange, branch)
            TopSellersData(dateRange, branch);
            SalesDetailsChart(dateRange, branch);
            getSalesDetails(dateRange, branch)
            // PaymentSales(dateRange, branch);

            $('#employee-date').text(dateRange);
            $('#employee-branch').text('No Data');
            $('#employee-id').text('No Data');
            $('#employee-total-sold').text('No Data');
            $('#employee-total-sales').text('No Data');
            $('#employee-commission').text('No Data');

            if (cashiername != '') {
                DisplayEmployeeData(cashiername, dateRange);
            } else {
                const tableBody = $('#employee-sold-table tbody');
                tableBody.empty();
                const tr = $('<tr>').append(
                    $('<td>').attr('colspan', 5).text(`Please Select a Cashier to display Data`).addClass('text-center h5')
                );
                tableBody.append(tr);
            }
            $('.date').text(dateRange);
        }
        //#endregion

        //#region SalesDetailsChart
        function SalesDetailsChart(daterange, branch) {
            // console.log(daterange);
            let formattedDate = formatDate(daterange);

            if (daterange == '') {
                warning('Error', 'No Date Found')
            } else {
                $.ajax({
                    type: 'POST',
                    url: '/salesdetails/gettotalsold',
                    data: {
                        daterange: formattedDate,
                        branch, branch
                    },
                    success: function (result) {
                        let sDate = moment(daterange.split(' - ')[0], 'MMM D, YYYY').format('YYYY-MM-DD');
                        let eDate = moment(daterange.split(' - ')[1], 'MMM D, YYYY').format('YYYY-MM-DD');
                        let filteredData = {};

                        // console.log(result.data)
                        let currentDate = moment(sDate);
                        while (currentDate.isSameOrBefore(eDate, 'day')) {
                            filteredData[currentDate.format('YYYY-MM-DD')] = { total: 0 };
                            currentDate.add(1, 'days');
                        }

                        result.data.forEach(item => {
                            let date = item.date.split(' ')[0];

                            if (!filteredData[date]) {
                                filteredData[date] = { total: 0 };
                            }

                            filteredData[date].total += parseFloat(item.total);
                        });

                        // console.log("Filtered Data:", filteredData);

                        let labels = [];
                        let data = [];

                        Object.keys(filteredData).forEach(date => {
                            labels.push(date);
                            data.push(filteredData[date].total);
                        });

                        let ctx = document.getElementById('gross-sales-chart').getContext('2d');

                        if (!grossSalesChart) {
                            grossSalesChart = new Chart(ctx, {
                                type: 'line',
                                data: {
                                    labels: labels,
                                    datasets: [{
                                        label: 'Gross Sales',
                                        data: data,
                                        borderColor: 'rgb(52, 177, 170, 0.75)',
                                        backgroundColor: 'rgb(52, 177, 170, 0.10)',
                                        fill: 'start',
                                        lineTension: 0.4,
                                    }]
                                }, options: {
                                    maintainAspectRatio: false,
                                    plugins: {
                                        legend: {
                                            display: false,
                                        }
                                    },
                                    scales: {
                                        x: {
                                            display: false,
                                            grid: {
                                                display: false,
                                            },
                                            offset: true,
                                        },
                                        y: {
                                            display: false,
                                            grid: {
                                                display: false,
                                            },
                                            ticks: {
                                                callback: function (value, index, values) {
                                                    return formatCurrency(value);
                                                }
                                            }
                                        },
                                    }
                                }
                            });
                        }
                    }, error: function (err) {
                        warning(err);
                    }
                });
            }
        }
        //#endregion 

        //#region Top Sellers
        function TopSellersData(daterange, branch) {
            let formattedDate = formatDate(daterange);
            if (daterange == '') {
                warning('Error', 'No Date Found')
            } else {
                $.ajax({
                    type: 'POST',
                    url: '/salesdetails/getdescription',
                    data: {
                        daterange: formattedDate,
                        branch: branch,
                    },
                    success: function (result) {
                        // console.log(result.data)
                        if (result.msg == 'success') {
                            let data = result.data;
                            let graphData = data.graphData;

                            if (graphData && graphData.length > 0) {
                                let labels = graphData.map(item => item.name);
                                let totalQuantity = graphData.map(item => item.totalQuantity);
                                if (!topSellersChart) {
                                    let ctx = document.getElementById('topSellersChart').getContext('2d');
                                    let chartdata = {
                                        labels: labels,
                                        datasets: [{
                                            label: 'Total Sales',
                                            data: totalQuantity,
                                            backgroundColor: [
                                                'rgb(46, 212, 126, .65)',
                                                'rgb(255, 0, 64, .65)',
                                                'rgb(255, 187, 50, .65)',
                                                'rgb(120, 93, 255, 0.65)',
                                                'rgb(0, 136, 255, .65)',
                                            ],
                                        }]
                                    };

                                    let config = {
                                        type: 'doughnut',
                                        data: chartdata,
                                        options: {
                                            maintainAspectRatio: false,
                                            scales: {
                                                x: {
                                                    barPercentage: 0.5,
                                                    grid: {
                                                        display: false,
                                                    },
                                                    display: false
                                                },
                                                y: {
                                                    ticks: {
                                                        callback: function (value, index, values) {
                                                            return `${value.toLocaleString(undefined, { maximumFractionDigits: 0 })}`;
                                                        }
                                                    },
                                                    display: false
                                                }
                                            },
                                            animation: {
                                                duration: 1000,
                                                easing: 'easeInOutQuad'
                                            },
                                            plugins: {
                                                legend: {
                                                    labels: {
                                                        font: {
                                                            family: 'Share Tech',
                                                            size: 15,
                                                        }
                                                    }
                                                },
                                            }
                                        }
                                    };

                                    topSellersChart = new Chart(ctx, config);
                                } else {
                                    topSellersChart.data.labels = labels;
                                    topSellersChart.data.datasets[0].data = totalQuantity;
                                    topSellersChart.update({
                                        duration: 1000,
                                        easing: 'easeInOutQuad'
                                    });
                                }
                                $('#chartContainer').show();
                                $('#noDataMessage').hide();
                            } else {
                                $('#chartContainer').hide();
                                $('#noDataMessage').show();
                            }
                        }
                    },
                    error: function (err) {
                        warning(err);
                    }
                });
            }
        }
        //#endregion

        //#region Sales Details Gross Sales, Refund, Discount, Net Sales, Gross Profit
        function getSalesDetails(date, branch) {
            let formattedDate = formatDate(date);

            $.ajax({
                type: 'POST',
                url: '/salesdetails/get-sales-details',
                data: {
                    daterange: formattedDate,
                    branch, branch
                },
                success: function (result) {
                    let defaultValues = {
                        GrossProfit: 0,
                        GrossSales: 0,
                        NetSales: 0,
                        Refunds: 0,
                        Discounts: 0
                    };

                    let data = result.msg === "success" ? result.data[0] : defaultValues;

                    updateCurrencyValues(data);
                },
                error: function (err) {
                    warning(err);
                    updateCurrencyValues();
                }
            });
        }

        function updateCurrencyValues(data) {
            let elementsToUpdate = {
                "#gross-profit-total": data.GrossProfit,
                "#gross-sales-total": data.GrossSales,
                "#net-sales-total": data.NetSales,
                "#refunds-total": data.Refunds,
                "#discounts-total": data.Discounts
            };

            for (let [elementId, value] of Object.entries(elementsToUpdate)) {
                $(elementId).text(formatCurrency(value));
            }
        }
        //#endregion

        //#region Date Formatting
        function formatDate(date) {
            let startDate = moment(date.split(' - ')[0], 'MMM D, YYYY').format('MM/DD/YYYY');
            let endDate = moment(date.split(' - ')[1], 'MMM D, YYYY').format('MM/DD/YYYY');
            let formattedDate = startDate + ' - ' + endDate;

            return formattedDate;
        }
        //#endregion

        //#region IndexedDB
        indexedDBExecute(() => {
            PopulateTopSellersTable($('#dateRange').val());
        });

        function indexedDBExecute(callback) {
            const dbName = 'Asvesti';
            const dbVersion = 1;

            let request = indexedDB.open(dbName, dbVersion);

            request.onsuccess = function (event) {
                db = event.target.result;
                console.log('Database opened successfully');
                callback(); // Call the callback function after successful initialization
            };

            request.onerror = function (event) {
                console.error('Error opening database:', event.target.error);
                // Handle the error appropriately
            };
        }

        function getDataById(id) {
            return new Promise((resolve, reject) => {
                if (!db) {
                    reject('Database is not initialized');
                    return;
                }

                let transaction = db.transaction(['imageTable'], 'readonly');
                let objectStore = transaction.objectStore('imageTable');

                let getRequest = objectStore.get(id);

                getRequest.onsuccess = function () {
                    let data = getRequest.result;
                    if (data) {
                        resolve(data);
                    } else {
                        resolve('No data found with ID: ' + id);
                    }
                };

                getRequest.onerror = function () {
                    reject('Error retrieving data by ID: ' + id);
                };
            });
        }
        //#endregion

        //#region Load Lists
        function LoadList() {
            $.ajax({
                type: 'GET',
                url: '/branch/load',
                success: function (result) {
                    const data = result.data;

                    const allBranchOption = $('<li></li>')
                        .text('All Branch')
                        .data('branchid', ''); 

                    $('.branchlist').append(allBranchOption);

                    $.each(data, function (key, item) {
                        if(item.status == 'ACTIVE'){
                            const listItem = $('<li></li>')
                                .text(item.branchname)
                                .data('branchid', item.branchid);

                            $('.branchlist').append(listItem);
                        }
                    });

                    $('.branchlist').on('click', 'li', function () {
                        const selectedOption = $(this).text();
                        const selectedbranchId = $(this).data('branchid');
                        $("#payment-branch-name").text(selectedOption)
                        
                        $('#selectedbranch').text(selectedOption);
                        $('#branchid').val(selectedbranchId).change();
                    });
                },
                error: function (err) {
                    warning(err);
                }
            });

            $.ajax({
                type: 'POST',
                url: '/salesdetails/load',
                success: function (result) {
                    var data = result.data;
                    var uniqueCashiers = [];

                    $.each(data, function (key, item) {
                        if (uniqueCashiers.indexOf(item.cashier) === -1) {
                            uniqueCashiers.push(item.cashier);

                            var listItem = $('<li></li>')
                                .text(item.cashier.toUpperCase())
                                .data('cashierid', item.cashier);

                            $('.cashierlist').append(listItem);
                        }
                    });

                    $('.cashierlist').on('click', 'li', function () {
                        var selectedOption = $(this).text();
                        var selectedcashierId = $(this).data('cashierid');

                        $('#selectedcashier').text(selectedOption);
                        $('#cashierid').val(selectedcashierId).change();
                    });
                },
                error: function (err) {
                    warning(err);
                }
            });
        }
        //#endregion

        //#region Display Employee Data
        function DisplayEmployeeData(cashier, dateRange) {
            let formattedDate = formatDate(dateRange);

            let employeeData = [];
            $.ajax({
                url: '/salesdetails/staff-sales',
                method: 'POST',
                data: {
                    cashier: cashier,
                    daterange: formattedDate,
                },
                success: function (data) {
                    const employeeData = data.data;
                    const tableBody = $('#employee-sold-table tbody');
                    tableBody.empty();

                    if(employeeData.length != 0){
                        console.log(employeeData)
                        let index = 0;
                        const branches = employeeData.branch.join(', '); // Convert array to comma-separated string

                        $('#employee-branch').text(branches);
                        $('#employee-id').text(employeeData.employeeid);
                        $('#employee-total-sold').text(employeeData.totalQuantity);
                        $('#employee-total-sales').text(formatCurrency(employeeData.totalSales));
                        $('#employee-commission').text(formatCurrency(employeeData.commission));
                        
                        let sortedData = employeeData.soldItems;

                        sortedData.sort((a, b) => b.quantity - a.quantity);

                        sortedData.forEach((row) => {
                            index++
                            const {name, quantity, totalPrice, productId, category} = row;
                            
                            const tr = $('<tr>').append(
                                $('<td>', { text: index, 'data-label': 'No.', class: 'custom-mobile-align text-ceneter' }),
                                $('<td>', { text: name, 'data-label': 'Product Name', class: 'custom-mobile-align text-left' }),
                                $('<td>', { text: category, 'data-label': 'Category', class: 'custom-mobile-align text-left' }),
                                $('<td>', { text: quantity, 'data-label': 'Sold', class: 'custom-mobile-align text-left' }),
                                $('<td>', { text: formatCurrency(totalPrice), 'data-label': 'Total Amount', class: 'custom-mobile-align text-left' })
                            );
                            tableBody.append(tr);
                        })
                    }else{
                        const tr = $('<tr>').append(
                            $('<td>').attr('colspan', 5).text(`${cashier} doesn't have Sales at this Date`).addClass('text-center h5')
                        );
                        tableBody.append(tr);
                    }
                },
                error: function (error) {
                    console.error(error);
                }
            });
        }
        //#endregion

        //#endregion
    });
</script>